# # -*- coding: utf-8 -*-
#
# from antispoofing.mcnns.utils import *
#
#
# class LRN2D(Layer):
#     """
#     This code is adapted from pylearn2.
#     License at: https://github.com/lisa-lab/pylearn2/blob/master/LICENSE.txt
#     """
#
#     def __init__(self, alpha=1e-4, k=2, beta=0.75, n=5, **kwargs):
#         if n % 2 == 0:
#             raise NotImplementedError("LRN2D only works with odd n. n provided: " + str(n))
#         super(LRN2D, self).__init__(**kwargs)
#         self.alpha = alpha
#         self.k = k
#         self.beta = beta
#         self.n = n
#
#     def get_output(self, X):
#         b, ch, r, c = K.shape(X)
#         half_n = self.n // 2
#         input_sqr = K.square(X)
#         extra_channels = K.zeros((b, ch + 2 * half_n, r, c))
#         input_sqr = K.concatenate([extra_channels[:, :half_n, :, :],
#                                    input_sqr,
#                                    extra_channels[:, half_n + ch:, :, :]],
#                                   axis=1)
#         scale = self.k
#         for i in range(self.n):
#             scale += self.alpha * input_sqr[:, i:i + ch, :, :]
#         scale = scale ** self.beta
#
#         return X / scale

{
    "0": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2130432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2130432 exceeds limit 30000',)"
            }
        }
    }, 
    "1": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "2": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2404864 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2404864 exceeds limit 30000',)"
            }
        }
    }, 
    "3": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 124960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 124960 exceeds limit 30000',)"
            }
        }
    }, 
    "4": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 234048 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 234048 exceeds limit 30000',)"
            }
        }
    }, 
    "5": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 905216 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 905216 exceeds limit 600000',)"
            }
        }
    }, 
    "6": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1202432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1202432 exceeds limit 30000',)"
            }
        }
    }, 
    "7": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1115712 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1115712 exceeds limit 30000',)"
            }
        }
    }, 
    "8": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.28445833921432495, 
            "svm_time": 18.263319969177246, 
            "slm_time": 11.144386053085327, 
            "feat_shape": [
                800, 
                16, 
                7, 
                11
            ]
        }
    }, 
    "9": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "10": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 2, 3), (3, 3), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 2, 3), (3, 3), True))"
            }
        }
    }, 
    "11": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10983333736658096, 
            "svm_time": 19.343089818954468, 
            "slm_time": 28.7530779838562, 
            "feat_shape": [
                800, 
                256, 
                6, 
                10
            ]
        }
    }, 
    "12": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 483840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 483840 exceeds limit 30000',)"
            }
        }
    }, 
    "13": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 516096 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 516096 exceeds limit 30000',)"
            }
        }
    }, 
    "14": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "15": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 619008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 619008 exceeds limit 30000',)"
            }
        }
    }, 
    "16": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 967680 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 967680 exceeds limit 600000',)"
            }
        }
    }, 
    "17": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.23579168319702148, 
            "svm_time": 18.676615953445435, 
            "slm_time": 14.014324188232422, 
            "feat_shape": [
                800, 
                64, 
                7, 
                11
            ]
        }
    }, 
    "18": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 566400 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 566400 exceeds limit 30000',)"
            }
        }
    }, 
    "19": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 619008 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 619008 exceeds limit 600000',)"
            }
        }
    }, 
    "20": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 483840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 483840 exceeds limit 30000',)"
            }
        }
    }, 
    "21": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "22": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 575008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 575008 exceeds limit 30000',)"
            }
        }
    }, 
    "23": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 77376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 77376 exceeds limit 30000',)"
            }
        }
    }, 
    "24": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "25": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.24441666901111603, 
            "svm_time": 18.70283007621765, 
            "slm_time": 17.758177995681763, 
            "feat_shape": [
                800, 
                64, 
                5, 
                9
            ]
        }
    }, 
    "26": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 52800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 52800 exceeds limit 30000',)"
            }
        }
    }, 
    "27": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 54400 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 54400 exceeds limit 30000',)"
            }
        }
    }, 
    "28": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1150016 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1150016 exceeds limit 30000',)"
            }
        }
    }, 
    "29": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "30": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 967680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 967680 exceeds limit 30000',)"
            }
        }
    }, 
    "31": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 42240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 42240 exceeds limit 30000',)"
            }
        }
    }, 
    "32": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "33": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 30240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 30240 exceeds limit 30000',)"
            }
        }
    }, 
    "34": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1238016 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1238016 exceeds limit 30000',)"
            }
        }
    }, 
    "35": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4462848 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4462848 exceeds limit 30000',)"
            }
        }
    }, 
    "36": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 143360 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 143360 exceeds limit 30000',)"
            }
        }
    }, 
    "37": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 249920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 249920 exceeds limit 30000',)"
            }
        }
    }, 
    "38": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2097280 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2097280 exceeds limit 30000',)"
            }
        }
    }, 
    "39": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 124960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 124960 exceeds limit 30000',)"
            }
        }
    }, 
    "40": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11674999445676804, 
            "svm_time": 19.93483805656433, 
            "slm_time": 42.20731210708618, 
            "feat_shape": [
                800, 
                128, 
                9, 
                13
            ]
        }
    }, 
    "41": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 524320 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 524320 exceeds limit 30000',)"
            }
        }
    }, 
    "42": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1822500228881836, 
            "svm_time": 19.19933319091797, 
            "slm_time": 8.037232875823975, 
            "feat_shape": [
                800, 
                32, 
                10, 
                14
            ]
        }
    }, 
    "43": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "44": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 117024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 117024 exceeds limit 30000',)"
            }
        }
    }, 
    "45": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "46": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 120960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 120960 exceeds limit 30000',)"
            }
        }
    }, 
    "47": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 30240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 30240 exceeds limit 30000',)"
            }
        }
    }, 
    "48": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 967680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 967680 exceeds limit 30000',)"
            }
        }
    }, 
    "49": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1914166510105133, 
            "svm_time": 19.18282914161682, 
            "slm_time": 7.78510308265686, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "50": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4260864 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4260864 exceeds limit 30000',)"
            }
        }
    }, 
    "51": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "52": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4260864 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4260864 exceeds limit 600000',)"
            }
        }
    }, 
    "53": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 278928 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 278928 exceeds limit 30000',)"
            }
        }
    }, 
    "54": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2231424 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2231424 exceeds limit 600000',)"
            }
        }
    }, 
    "55": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07087500393390656, 
            "svm_time": 21.08422088623047, 
            "slm_time": 23.731936931610107, 
            "feat_shape": [
                800, 
                64, 
                17, 
                25
            ]
        }
    }, 
    "56": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 137344 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 137344 exceeds limit 30000',)"
            }
        }
    }, 
    "57": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4395008 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4395008 exceeds limit 600000',)"
            }
        }
    }, 
    "58": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.16495831310749054, 
            "svm_time": 19.282105922698975, 
            "slm_time": 6.427207946777344, 
            "feat_shape": [
                800, 
                16, 
                14, 
                18
            ]
        }
    }, 
    "59": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2197504 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2197504 exceeds limit 600000',)"
            }
        }
    }, 
    "60": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.23341669142246246, 
            "svm_time": 20.195677995681763, 
            "slm_time": 16.815109968185425, 
            "feat_shape": [
                800, 
                64, 
                12, 
                16
            ]
        }
    }, 
    "61": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2590416669845581, 
            "svm_time": 19.452131986618042, 
            "slm_time": 7.727829933166504, 
            "feat_shape": [
                800, 
                64, 
                7, 
                9
            ]
        }
    }, 
    "62": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 249920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 249920 exceeds limit 30000',)"
            }
        }
    }, 
    "63": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 154752 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 154752 exceeds limit 30000',)"
            }
        }
    }, 
    "64": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 601216 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 601216 exceeds limit 30000',)"
            }
        }
    }, 
    "65": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "66": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "67": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 619008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 619008 exceeds limit 30000',)"
            }
        }
    }, 
    "68": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 483840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 483840 exceeds limit 30000',)"
            }
        }
    }, 
    "69": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 274688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 274688 exceeds limit 30000',)"
            }
        }
    }, 
    "70": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1537916660308838, 
            "svm_time": 19.36469793319702, 
            "slm_time": 27.01328206062317, 
            "feat_shape": [
                800, 
                128, 
                2, 
                4
            ]
        }
    }, 
    "71": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 68672 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 68672 exceeds limit 30000',)"
            }
        }
    }, 
    "72": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 905216 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 905216 exceeds limit 30000',)"
            }
        }
    }, 
    "73": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 283200 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 283200 exceeds limit 30000',)"
            }
        }
    }, 
    "74": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 575008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 575008 exceeds limit 30000',)"
            }
        }
    }, 
    "75": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2334720 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2334720 exceeds limit 600000',)"
            }
        }
    }, 
    "76": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 258048 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 258048 exceeds limit 30000',)"
            }
        }
    }, 
    "77": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 72960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 72960 exceeds limit 30000',)"
            }
        }
    }, 
    "78": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "79": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 309504 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 309504 exceeds limit 30000',)"
            }
        }
    }, 
    "80": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1150016 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1150016 exceeds limit 30000',)"
            }
        }
    }, 
    "81": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 113152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 113152 exceeds limit 30000',)"
            }
        }
    }, 
    "82": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10370835661888123, 
            "svm_time": 19.56309700012207, 
            "slm_time": 12.956765174865723, 
            "feat_shape": [
                800, 
                64, 
                6, 
                8
            ]
        }
    }, 
    "83": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2476032 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2476032 exceeds limit 30000',)"
            }
        }
    }, 
    "84": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 499840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 499840 exceeds limit 30000',)"
            }
        }
    }, 
    "85": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "86": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 98304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 98304 exceeds limit 30000',)"
            }
        }
    }, 
    "87": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 566400 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 566400 exceeds limit 30000',)"
            }
        }
    }, 
    "88": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "89": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 905216 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 905216 exceeds limit 600000',)"
            }
        }
    }, 
    "90": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1224999949336052, 
            "svm_time": 19.791894912719727, 
            "slm_time": 7.7226881980896, 
            "feat_shape": [
                800, 
                16, 
                10, 
                14
            ]
        }
    }, 
    "91": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2369664 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2369664 exceeds limit 30000',)"
            }
        }
    }, 
    "92": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1627083122730255, 
            "svm_time": 19.861701011657715, 
            "slm_time": 8.339607000350952, 
            "feat_shape": [
                800, 
                32, 
                12, 
                16
            ]
        }
    }, 
    "93": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 129024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 129024 exceeds limit 30000',)"
            }
        }
    }, 
    "94": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 129024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 129024 exceeds limit 30000',)"
            }
        }
    }, 
    "95": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1184832 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1184832 exceeds limit 30000',)"
            }
        }
    }, 
    "96": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 124960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 124960 exceeds limit 30000',)"
            }
        }
    }, 
    "97": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.25183334946632385, 
            "svm_time": 19.663148880004883, 
            "slm_time": 6.880602121353149, 
            "feat_shape": [
                800, 
                32, 
                6, 
                8
            ]
        }
    }, 
    "98": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2300032 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2300032 exceeds limit 30000',)"
            }
        }
    }, 
    "99": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1167360 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1167360 exceeds limit 30000',)"
            }
        }
    }, 
    "100": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 592416 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 592416 exceeds limit 30000',)"
            }
        }
    }, 
    "101": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 38688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 38688 exceeds limit 30000',)"
            }
        }
    }, 
    "102": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17520833015441895, 
            "svm_time": 21.423200845718384, 
            "slm_time": 10.794066190719604, 
            "feat_shape": [
                800, 
                32, 
                25, 
                33
            ]
        }
    }, 
    "103": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 150304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 150304 exceeds limit 30000',)"
            }
        }
    }, 
    "104": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1770416796207428, 
            "svm_time": 19.850818157196045, 
            "slm_time": 24.649253845214844, 
            "feat_shape": [
                800, 
                32, 
                10, 
                14
            ]
        }
    }, 
    "105": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 226304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 226304 exceeds limit 30000',)"
            }
        }
    }, 
    "106": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2231424 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2231424 exceeds limit 600000',)"
            }
        }
    }, 
    "107": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 600000',)"
            }
        }
    }, 
    "108": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 52800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 52800 exceeds limit 30000',)"
            }
        }
    }, 
    "109": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1065216 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1065216 exceeds limit 600000',)"
            }
        }
    }, 
    "110": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 49152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 49152 exceeds limit 30000',)"
            }
        }
    }, 
    "111": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 105600 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 105600 exceeds limit 30000',)"
            }
        }
    }, 
    "112": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4669440 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4669440 exceeds limit 30000',)"
            }
        }
    }, 
    "113": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.26216667890548706, 
            "svm_time": 20.250538110733032, 
            "slm_time": 26.11097002029419, 
            "feat_shape": [
                800, 
                128, 
                6, 
                10
            ]
        }
    }, 
    "114": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 45632 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 45632 exceeds limit 30000',)"
            }
        }
    }, 
    "115": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.30237501859664917, 
            "svm_time": 21.029597997665405, 
            "slm_time": 23.12530493736267, 
            "feat_shape": [
                800, 
                128, 
                10, 
                14
            ]
        }
    }, 
    "116": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 610080 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 610080 exceeds limit 600000',)"
            }
        }
    }, 
    "117": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 68672 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 68672 exceeds limit 30000',)"
            }
        }
    }, 
    "118": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4739328 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4739328 exceeds limit 600000',)"
            }
        }
    }, 
    "119": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4462848 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4462848 exceeds limit 30000',)"
            }
        }
    }, 
    "120": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 45632 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 45632 exceeds limit 30000',)"
            }
        }
    }, 
    "121": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "122": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 6, 8), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 6, 8), (9, 9), True))"
            }
        }
    }, 
    "123": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.20454171299934387, 
            "svm_time": 21.958231210708618, 
            "slm_time": 8.634529829025269, 
            "feat_shape": [
                800, 
                32, 
                26, 
                34
            ]
        }
    }, 
    "124": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14262503385543823, 
            "svm_time": 20.256826162338257, 
            "slm_time": 13.233747959136963, 
            "feat_shape": [
                800, 
                128, 
                5, 
                9
            ]
        }
    }, 
    "125": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 524320 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 524320 exceeds limit 30000',)"
            }
        }
    }, 
    "126": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 72960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 72960 exceeds limit 30000',)"
            }
        }
    }, 
    "127": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.23266670107841492, 
            "svm_time": 20.280129194259644, 
            "slm_time": 14.788265943527222, 
            "feat_shape": [
                800, 
                32, 
                6, 
                10
            ]
        }
    }, 
    "128": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "129": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 305040 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 305040 exceeds limit 30000',)"
            }
        }
    }, 
    "130": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 36480 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 36480 exceeds limit 30000',)"
            }
        }
    }, 
    "131": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4809728 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4809728 exceeds limit 600000',)"
            }
        }
    }, 
    "132": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 6, 8), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 6, 8), (9, 9), True))"
            }
        }
    }, 
    "133": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 124960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 124960 exceeds limit 30000',)"
            }
        }
    }, 
    "134": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 549376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 549376 exceeds limit 30000',)"
            }
        }
    }, 
    "135": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 600000',)"
            }
        }
    }, 
    "136": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 610080 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 610080 exceeds limit 30000',)"
            }
        }
    }, 
    "137": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "138": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 154752 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 154752 exceeds limit 30000',)"
            }
        }
    }, 
    "139": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 70800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 70800 exceeds limit 30000',)"
            }
        }
    }, 
    "140": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 72960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 72960 exceeds limit 30000',)"
            }
        }
    }, 
    "141": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 129024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 129024 exceeds limit 30000',)"
            }
        }
    }, 
    "142": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11887498944997787, 
            "svm_time": 20.396787881851196, 
            "slm_time": 7.876194000244141, 
            "feat_shape": [
                800, 
                32, 
                6, 
                8
            ]
        }
    }, 
    "143": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.16441668570041656, 
            "svm_time": 20.827210187911987, 
            "slm_time": 7.539820909500122, 
            "feat_shape": [
                800, 
                16, 
                22, 
                30
            ]
        }
    }, 
    "144": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.38341668248176575, 
            "svm_time": 22.485435009002686, 
            "slm_time": 10.228471994400024, 
            "feat_shape": [
                800, 
                32, 
                26, 
                34
            ]
        }
    }, 
    "145": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 45632 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 45632 exceeds limit 30000',)"
            }
        }
    }, 
    "146": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 300608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 300608 exceeds limit 30000',)"
            }
        }
    }, 
    "147": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 936192 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 936192 exceeds limit 30000',)"
            }
        }
    }, 
    "148": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 557856 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 557856 exceeds limit 30000',)"
            }
        }
    }, 
    "149": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.20512498915195465, 
            "svm_time": 21.762258052825928, 
            "slm_time": 3.692397117614746, 
            "feat_shape": [
                800, 
                16, 
                31, 
                39
            ]
        }
    }, 
    "150": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2231424 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2231424 exceeds limit 30000',)"
            }
        }
    }, 
    "151": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 318528 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 318528 exceeds limit 30000',)"
            }
        }
    }, 
    "152": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13599997758865356, 
            "svm_time": 20.50300407409668, 
            "slm_time": 6.530805826187134, 
            "feat_shape": [
                800, 
                32, 
                7, 
                9
            ]
        }
    }, 
    "153": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 141600 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 141600 exceeds limit 30000',)"
            }
        }
    }, 
    "154": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "155": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4531200 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4531200 exceeds limit 30000',)"
            }
        }
    }, 
    "156": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 258048 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 258048 exceeds limit 30000',)"
            }
        }
    }, 
    "157": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4531200 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4531200 exceeds limit 600000',)"
            }
        }
    }, 
    "158": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 77952 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 77952 exceeds limit 30000',)"
            }
        }
    }, 
    "159": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4395008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4395008 exceeds limit 30000',)"
            }
        }
    }, 
    "160": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1048640 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1048640 exceeds limit 600000',)"
            }
        }
    }, 
    "161": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "162": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.15041665732860565, 
            "svm_time": 23.755999088287354, 
            "slm_time": 25.89926791191101, 
            "feat_shape": [
                800, 
                128, 
                9, 
                13
            ]
        }
    }, 
    "163": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06700000166893005, 
            "svm_time": 23.959228992462158, 
            "slm_time": 8.652513980865479, 
            "feat_shape": [
                800, 
                32, 
                26, 
                34
            ]
        }
    }, 
    "164": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1524166762828827, 
            "svm_time": 21.485944986343384, 
            "slm_time": 4.853882074356079, 
            "feat_shape": [
                800, 
                32, 
                12, 
                16
            ]
        }
    }, 
    "165": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 610080 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 610080 exceeds limit 30000',)"
            }
        }
    }, 
    "166": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 309504 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 309504 exceeds limit 30000',)"
            }
        }
    }, 
    "167": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1601666510105133, 
            "svm_time": 22.617767095565796, 
            "slm_time": 33.0052649974823, 
            "feat_shape": [
                800, 
                64, 
                5, 
                9
            ]
        }
    }, 
    "168": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 77376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 77376 exceeds limit 30000',)"
            }
        }
    }, 
    "169": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 72960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 72960 exceeds limit 30000',)"
            }
        }
    }, 
    "170": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 133152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 133152 exceeds limit 30000',)"
            }
        }
    }, 
    "171": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 600000',)"
            }
        }
    }, 
    "172": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4260864 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4260864 exceeds limit 30000',)"
            }
        }
    }, 
    "173": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 2, 3), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 2, 3), (7, 7), True))"
            }
        }
    }, 
    "174": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "175": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.18683333694934845, 
            "svm_time": 23.616305112838745, 
            "slm_time": 16.61894392967224, 
            "feat_shape": [
                800, 
                32, 
                25, 
                33
            ]
        }
    }, 
    "176": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 30000',)"
            }
        }
    }, 
    "177": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 113152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 113152 exceeds limit 30000',)"
            }
        }
    }, 
    "178": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 150304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 150304 exceeds limit 30000',)"
            }
        }
    }, 
    "179": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.19729164242744446, 
            "svm_time": 21.388551950454712, 
            "slm_time": 5.380640983581543, 
            "feat_shape": [
                800, 
                32, 
                6, 
                8
            ]
        }
    }, 
    "180": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.289458304643631, 
            "svm_time": 23.14531397819519, 
            "slm_time": 15.352447032928467, 
            "feat_shape": [
                800, 
                64, 
                14, 
                18
            ]
        }
    }, 
    "181": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 129024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 129024 exceeds limit 30000',)"
            }
        }
    }, 
    "182": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 936192 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 936192 exceeds limit 30000',)"
            }
        }
    }, 
    "183": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 49152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 49152 exceeds limit 30000',)"
            }
        }
    }, 
    "184": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4669440 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4669440 exceeds limit 30000',)"
            }
        }
    }, 
    "185": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2097280 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2097280 exceeds limit 600000',)"
            }
        }
    }, 
    "186": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 5), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 5), (7, 7), True))"
            }
        }
    }, 
    "187": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "188": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "189": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.19599999487400055, 
            "svm_time": 23.076982021331787, 
            "slm_time": 10.000956058502197, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "190": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 32256 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 32256 exceeds limit 30000',)"
            }
        }
    }, 
    "191": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17937497794628143, 
            "svm_time": 21.857776165008545, 
            "slm_time": 34.130120038986206, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "192": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 129024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 129024 exceeds limit 30000',)"
            }
        }
    }, 
    "193": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "194": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2265600 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2265600 exceeds limit 600000',)"
            }
        }
    }, 
    "195": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 407680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 407680 exceeds limit 30000',)"
            }
        }
    }, 
    "196": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "197": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.3241666257381439, 
            "svm_time": 23.413864135742188, 
            "slm_time": 8.674978017807007, 
            "feat_shape": [
                800, 
                16, 
                26, 
                34
            ]
        }
    }, 
    "198": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 566400 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 566400 exceeds limit 30000',)"
            }
        }
    }, 
    "199": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 468096 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 468096 exceeds limit 30000',)"
            }
        }
    }, 
    "200": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2440320 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2440320 exceeds limit 600000',)"
            }
        }
    }, 
    "201": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 452608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 452608 exceeds limit 30000',)"
            }
        }
    }, 
    "202": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 6, 8), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 6, 8), (7, 7), True))"
            }
        }
    }, 
    "203": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "204": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 601216 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 601216 exceeds limit 30000',)"
            }
        }
    }, 
    "205": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14883331954479218, 
            "svm_time": 23.500190019607544, 
            "slm_time": 26.10481095314026, 
            "feat_shape": [
                800, 
                64, 
                16, 
                24
            ]
        }
    }, 
    "206": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "207": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11437499523162842, 
            "svm_time": 21.788217067718506, 
            "slm_time": 7.7640299797058105, 
            "feat_shape": [
                800, 
                16, 
                12, 
                16
            ]
        }
    }, 
    "208": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 6, 8), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 6, 8), (9, 9), True))"
            }
        }
    }, 
    "209": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1287916749715805, 
            "svm_time": 22.646426916122437, 
            "slm_time": 6.480804920196533, 
            "feat_shape": [
                800, 
                64, 
                12, 
                16
            ]
        }
    }, 
    "210": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13995832204818726, 
            "svm_time": 21.797733783721924, 
            "slm_time": 6.787657022476196, 
            "feat_shape": [
                800, 
                128, 
                4, 
                8
            ]
        }
    }, 
    "211": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2334720 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2334720 exceeds limit 600000',)"
            }
        }
    }, 
    "212": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 7, 9), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 7, 9), (9, 9), True))"
            }
        }
    }, 
    "213": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 999680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 999680 exceeds limit 30000',)"
            }
        }
    }, 
    "214": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 2, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 2, 4), (7, 7), True))"
            }
        }
    }, 
    "215": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 145920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 145920 exceeds limit 30000',)"
            }
        }
    }, 
    "216": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4952064 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4952064 exceeds limit 600000',)"
            }
        }
    }, 
    "217": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4327680 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4327680 exceeds limit 600000',)"
            }
        }
    }, 
    "218": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 113152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 113152 exceeds limit 30000',)"
            }
        }
    }, 
    "219": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 601216 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 601216 exceeds limit 600000',)"
            }
        }
    }, 
    "220": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 70800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 70800 exceeds limit 30000',)"
            }
        }
    }, 
    "221": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 30000',)"
            }
        }
    }, 
    "222": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 305040 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 305040 exceeds limit 30000',)"
            }
        }
    }, 
    "223": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4739328 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4739328 exceeds limit 600000',)"
            }
        }
    }, 
    "224": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2440320 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2440320 exceeds limit 600000',)"
            }
        }
    }, 
    "225": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 305040 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 305040 exceeds limit 30000',)"
            }
        }
    }, 
    "226": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2064384 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2064384 exceeds limit 600000',)"
            }
        }
    }, 
    "227": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08345833420753479, 
            "svm_time": 23.711708068847656, 
            "slm_time": 12.465091943740845, 
            "feat_shape": [
                800, 
                32, 
                21, 
                29
            ]
        }
    }, 
    "228": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 234048 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 234048 exceeds limit 30000',)"
            }
        }
    }, 
    "229": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1937500387430191, 
            "svm_time": 23.420849084854126, 
            "slm_time": 4.636672019958496, 
            "feat_shape": [
                800, 
                16, 
                30, 
                38
            ]
        }
    }, 
    "230": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "231": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 300608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 300608 exceeds limit 30000',)"
            }
        }
    }, 
    "232": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 274688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 274688 exceeds limit 30000',)"
            }
        }
    }, 
    "233": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.16208331286907196, 
            "svm_time": 23.599459886550903, 
            "slm_time": 7.509968996047974, 
            "feat_shape": [
                800, 
                32, 
                22, 
                30
            ]
        }
    }, 
    "234": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 619008 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 619008 exceeds limit 600000',)"
            }
        }
    }, 
    "235": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.058708325028419495, 
            "svm_time": 22.408723831176758, 
            "slm_time": 34.31137800216675, 
            "feat_shape": [
                800, 
                128, 
                7, 
                9
            ]
        }
    }, 
    "236": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "237": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 68672 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 68672 exceeds limit 30000',)"
            }
        }
    }, 
    "238": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "239": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 32832 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 32832 exceeds limit 30000',)"
            }
        }
    }, 
    "240": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4462848 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4462848 exceeds limit 600000',)"
            }
        }
    }, 
    "241": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 4, 6), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 4, 6), (9, 9), True))"
            }
        }
    }, 
    "242": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 36480 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 36480 exceeds limit 30000',)"
            }
        }
    }, 
    "243": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2369664 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2369664 exceeds limit 600000',)"
            }
        }
    }, 
    "244": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2591665983200073, 
            "svm_time": 22.932178020477295, 
            "slm_time": 6.054232120513916, 
            "feat_shape": [
                800, 
                64, 
                8, 
                12
            ]
        }
    }, 
    "245": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "246": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 318528 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 318528 exceeds limit 30000',)"
            }
        }
    }, 
    "247": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.29470834136009216, 
            "svm_time": 23.019256114959717, 
            "slm_time": 10.105915784835815, 
            "feat_shape": [
                800, 
                16, 
                7, 
                11
            ]
        }
    }, 
    "248": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.21900002658367157, 
            "svm_time": 23.938302040100098, 
            "slm_time": 5.776163101196289, 
            "feat_shape": [
                800, 
                16, 
                28, 
                36
            ]
        }
    }, 
    "249": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.20033332705497742, 
            "svm_time": 24.256181001663208, 
            "slm_time": 4.021800994873047, 
            "feat_shape": [
                800, 
                16, 
                31, 
                39
            ]
        }
    }, 
    "250": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 70800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 70800 exceeds limit 30000',)"
            }
        }
    }, 
    "251": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "252": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 905216 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 905216 exceeds limit 30000',)"
            }
        }
    }, 
    "253": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "254": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11829166859388351, 
            "svm_time": 23.31493878364563, 
            "slm_time": 6.425540208816528, 
            "feat_shape": [
                800, 
                16, 
                26, 
                34
            ]
        }
    }, 
    "255": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "256": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17533336579799652, 
            "svm_time": 23.366745948791504, 
            "slm_time": 43.02320599555969, 
            "feat_shape": [
                800, 
                256, 
                2, 
                4
            ]
        }
    }, 
    "257": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2404864 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2404864 exceeds limit 600000',)"
            }
        }
    }, 
    "258": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11149995774030685, 
            "svm_time": 25.021570920944214, 
            "slm_time": 60.47908687591553, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "259": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 5, 9), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 5, 9), (9, 9), True))"
            }
        }
    }, 
    "260": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 101920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 101920 exceeds limit 30000',)"
            }
        }
    }, 
    "261": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09012497961521149, 
            "svm_time": 24.342782020568848, 
            "slm_time": 8.339385986328125, 
            "feat_shape": [
                800, 
                32, 
                22, 
                30
            ]
        }
    }, 
    "262": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.22758334875106812, 
            "svm_time": 23.408321857452393, 
            "slm_time": 16.078025102615356, 
            "feat_shape": [
                800, 
                128, 
                8, 
                12
            ]
        }
    }, 
    "263": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.20154164731502533, 
            "svm_time": 23.34971785545349, 
            "slm_time": 8.292100191116333, 
            "feat_shape": [
                800, 
                16, 
                20, 
                28
            ]
        }
    }, 
    "264": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1238016 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1238016 exceeds limit 30000',)"
            }
        }
    }, 
    "265": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "266": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 182528 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 182528 exceeds limit 30000',)"
            }
        }
    }, 
    "267": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07920834422111511, 
            "svm_time": 23.191549062728882, 
            "slm_time": 20.64550495147705, 
            "feat_shape": [
                800, 
                128, 
                5, 
                9
            ]
        }
    }, 
    "268": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 105600 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 105600 exceeds limit 30000',)"
            }
        }
    }, 
    "269": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13433334231376648, 
            "svm_time": 23.135234117507935, 
            "slm_time": 11.987467050552368, 
            "feat_shape": [
                800, 
                128, 
                3, 
                5
            ]
        }
    }, 
    "270": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1115712 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1115712 exceeds limit 600000',)"
            }
        }
    }, 
    "271": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 71680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 71680 exceeds limit 30000',)"
            }
        }
    }, 
    "272": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08083334565162659, 
            "svm_time": 23.32366108894348, 
            "slm_time": 10.422582864761353, 
            "feat_shape": [
                800, 
                128, 
                5, 
                9
            ]
        }
    }, 
    "273": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 549376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 549376 exceeds limit 30000',)"
            }
        }
    }, 
    "274": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1184832 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1184832 exceeds limit 30000',)"
            }
        }
    }, 
    "275": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "276": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 36480 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 36480 exceeds limit 30000',)"
            }
        }
    }, 
    "277": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 40960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 40960 exceeds limit 30000',)"
            }
        }
    }, 
    "278": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 124960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 124960 exceeds limit 30000',)"
            }
        }
    }, 
    "279": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 967680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 967680 exceeds limit 30000',)"
            }
        }
    }, 
    "280": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.24775001406669617, 
            "svm_time": 23.59442901611328, 
            "slm_time": 5.220886945724487, 
            "feat_shape": [
                800, 
                16, 
                22, 
                30
            ]
        }
    }, 
    "281": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 145920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 145920 exceeds limit 30000',)"
            }
        }
    }, 
    "282": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1220160 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1220160 exceeds limit 600000',)"
            }
        }
    }, 
    "283": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "284": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2369664 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2369664 exceeds limit 600000',)"
            }
        }
    }, 
    "285": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 42240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 42240 exceeds limit 30000',)"
            }
        }
    }, 
    "286": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0390833355486393, 
            "svm_time": 23.234220027923584, 
            "slm_time": 12.102185010910034, 
            "feat_shape": [
                800, 
                128, 
                4, 
                6
            ]
        }
    }, 
    "287": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "288": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 137344 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 137344 exceeds limit 30000',)"
            }
        }
    }, 
    "289": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4327680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4327680 exceeds limit 30000',)"
            }
        }
    }, 
    "290": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1202432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1202432 exceeds limit 30000',)"
            }
        }
    }, 
    "291": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 38688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 38688 exceeds limit 30000',)"
            }
        }
    }, 
    "292": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 30000',)"
            }
        }
    }, 
    "293": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.21949997544288635, 
            "svm_time": 23.32005500793457, 
            "slm_time": 8.778575897216797, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "294": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.21920832991600037, 
            "svm_time": 24.343425989151, 
            "slm_time": 5.006641149520874, 
            "feat_shape": [
                800, 
                16, 
                28, 
                36
            ]
        }
    }, 
    "295": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17999997735023499, 
            "svm_time": 23.3751859664917, 
            "slm_time": 9.754673957824707, 
            "feat_shape": [
                800, 
                128, 
                3, 
                5
            ]
        }
    }, 
    "296": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2993749976158142, 
            "svm_time": 23.489267110824585, 
            "slm_time": 5.842742919921875, 
            "feat_shape": [
                800, 
                128, 
                5, 
                9
            ]
        }
    }, 
    "297": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1238016 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1238016 exceeds limit 30000',)"
            }
        }
    }, 
    "298": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0547916553914547, 
            "svm_time": 24.233163833618164, 
            "slm_time": 64.2123281955719, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "299": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 38688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 38688 exceeds limit 30000',)"
            }
        }
    }, 
    "300": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "301": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.26062503457069397, 
            "svm_time": 24.872848987579346, 
            "slm_time": 12.529907941818237, 
            "feat_shape": [
                800, 
                32, 
                22, 
                30
            ]
        }
    }, 
    "302": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "303": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 137344 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 137344 exceeds limit 30000',)"
            }
        }
    }, 
    "304": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 42240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 42240 exceeds limit 30000',)"
            }
        }
    }, 
    "305": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 168960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 168960 exceeds limit 30000',)"
            }
        }
    }, 
    "306": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14129166305065155, 
            "svm_time": 23.44673991203308, 
            "slm_time": 10.65845513343811, 
            "feat_shape": [
                800, 
                16, 
                7, 
                11
            ]
        }
    }, 
    "307": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4952064 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4952064 exceeds limit 600000',)"
            }
        }
    }, 
    "308": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 42240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 42240 exceeds limit 30000',)"
            }
        }
    }, 
    "309": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "310": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4462848 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4462848 exceeds limit 30000',)"
            }
        }
    }, 
    "311": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "312": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1167360 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1167360 exceeds limit 600000',)"
            }
        }
    }, 
    "313": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2097280 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2097280 exceeds limit 30000',)"
            }
        }
    }, 
    "314": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4063488 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4063488 exceeds limit 600000',)"
            }
        }
    }, 
    "315": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 141600 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 141600 exceeds limit 30000',)"
            }
        }
    }, 
    "316": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 145920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 145920 exceeds limit 30000',)"
            }
        }
    }, 
    "317": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 274688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 274688 exceeds limit 30000',)"
            }
        }
    }, 
    "318": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 36480 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 36480 exceeds limit 30000',)"
            }
        }
    }, 
    "319": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13108333945274353, 
            "svm_time": 23.60302495956421, 
            "slm_time": 22.844712018966675, 
            "feat_shape": [
                800, 
                128, 
                2, 
                4
            ]
        }
    }, 
    "320": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 283200 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 283200 exceeds limit 30000',)"
            }
        }
    }, 
    "321": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "322": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "323": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 120960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 120960 exceeds limit 30000',)"
            }
        }
    }, 
    "324": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 905216 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 905216 exceeds limit 600000',)"
            }
        }
    }, 
    "325": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2231424 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2231424 exceeds limit 600000',)"
            }
        }
    }, 
    "326": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1065216 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1065216 exceeds limit 30000',)"
            }
        }
    }, 
    "327": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 300608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 300608 exceeds limit 30000',)"
            }
        }
    }, 
    "328": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 1, 2), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 1, 2), (7, 7), True))"
            }
        }
    }, 
    "329": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2231424 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2231424 exceeds limit 30000',)"
            }
        }
    }, 
    "330": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 155904 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 155904 exceeds limit 30000',)"
            }
        }
    }, 
    "331": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 150304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 150304 exceeds limit 30000',)"
            }
        }
    }, 
    "332": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 258048 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 258048 exceeds limit 30000',)"
            }
        }
    }, 
    "333": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 1, 2), (3, 3), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 1, 2), (3, 3), True))"
            }
        }
    }, 
    "334": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2130432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2130432 exceeds limit 30000',)"
            }
        }
    }, 
    "335": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 309504 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 309504 exceeds limit 30000',)"
            }
        }
    }, 
    "336": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2163840 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2163840 exceeds limit 600000',)"
            }
        }
    }, 
    "337": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17429165542125702, 
            "svm_time": 25.929420948028564, 
            "slm_time": 10.468700170516968, 
            "feat_shape": [
                800, 
                32, 
                26, 
                34
            ]
        }
    }, 
    "338": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "339": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1048640 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1048640 exceeds limit 600000',)"
            }
        }
    }, 
    "340": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.18733333051204681, 
            "svm_time": 25.317900896072388, 
            "slm_time": 3.8560872077941895, 
            "feat_shape": [
                800, 
                16, 
                31, 
                39
            ]
        }
    }, 
    "341": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "342": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 75152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 75152 exceeds limit 30000',)"
            }
        }
    }, 
    "343": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "344": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 274688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 274688 exceeds limit 30000',)"
            }
        }
    }, 
    "345": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2515416443347931, 
            "svm_time": 24.987176179885864, 
            "slm_time": 59.268450021743774, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "346": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 120960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 120960 exceeds limit 30000',)"
            }
        }
    }, 
    "347": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06716667115688324, 
            "svm_time": 23.49474287033081, 
            "slm_time": 17.23735213279724, 
            "feat_shape": [
                800, 
                16, 
                7, 
                11
            ]
        }
    }, 
    "348": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.26770830154418945, 
            "svm_time": 23.907155990600586, 
            "slm_time": 13.10487985610962, 
            "feat_shape": [
                800, 
                128, 
                6, 
                8
            ]
        }
    }, 
    "349": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 6, 8), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 6, 8), (9, 9), True))"
            }
        }
    }, 
    "350": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2163840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2163840 exceeds limit 30000',)"
            }
        }
    }, 
    "351": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 108800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 108800 exceeds limit 30000',)"
            }
        }
    }, 
    "352": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10845831036567688, 
            "svm_time": 24.642066955566406, 
            "slm_time": 18.347248077392578, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "353": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1184832 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1184832 exceeds limit 30000',)"
            }
        }
    }, 
    "354": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4063488 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4063488 exceeds limit 30000',)"
            }
        }
    }, 
    "355": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "356": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2064384 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2064384 exceeds limit 30000',)"
            }
        }
    }, 
    "357": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2031744 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2031744 exceeds limit 600000',)"
            }
        }
    }, 
    "358": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 3, 5), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 3, 5), (9, 9), True))"
            }
        }
    }, 
    "359": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 905216 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 905216 exceeds limit 30000',)"
            }
        }
    }, 
    "360": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04849999025464058, 
            "svm_time": 24.371352910995483, 
            "slm_time": 39.82705497741699, 
            "feat_shape": [
                800, 
                128, 
                6, 
                10
            ]
        }
    }, 
    "361": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "362": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0417083315551281, 
            "svm_time": 24.33786106109619, 
            "slm_time": 22.777740001678467, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "363": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 532608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 532608 exceeds limit 30000',)"
            }
        }
    }, 
    "364": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1184832 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1184832 exceeds limit 30000',)"
            }
        }
    }, 
    "365": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 592416 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 592416 exceeds limit 30000',)"
            }
        }
    }, 
    "366": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "367": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4260864 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4260864 exceeds limit 30000',)"
            }
        }
    }, 
    "368": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2228332906961441, 
            "svm_time": 24.869992971420288, 
            "slm_time": 4.698951005935669, 
            "feat_shape": [
                800, 
                16, 
                22, 
                30
            ]
        }
    }, 
    "369": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.22858332097530365, 
            "svm_time": 24.88478112220764, 
            "slm_time": 7.790031909942627, 
            "feat_shape": [
                800, 
                16, 
                24, 
                32
            ]
        }
    }, 
    "370": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4809728 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4809728 exceeds limit 600000',)"
            }
        }
    }, 
    "371": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "372": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 30000',)"
            }
        }
    }, 
    "373": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4600064 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4600064 exceeds limit 30000',)"
            }
        }
    }, 
    "374": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 6, 8), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 6, 8), (9, 9), True))"
            }
        }
    }, 
    "375": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 30000',)"
            }
        }
    }, 
    "376": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 36480 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 36480 exceeds limit 30000',)"
            }
        }
    }, 
    "377": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1167360 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1167360 exceeds limit 30000',)"
            }
        }
    }, 
    "378": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 2, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 2, 4), (5, 5), True))"
            }
        }
    }, 
    "379": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 549376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 549376 exceeds limit 30000',)"
            }
        }
    }, 
    "380": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.20166663825511932, 
            "svm_time": 24.515247106552124, 
            "slm_time": 13.42055606842041, 
            "feat_shape": [
                800, 
                32, 
                12, 
                16
            ]
        }
    }, 
    "381": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 601216 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 601216 exceeds limit 600000',)"
            }
        }
    }, 
    "382": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 967680 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 967680 exceeds limit 600000',)"
            }
        }
    }, 
    "383": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 601216 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 601216 exceeds limit 600000',)"
            }
        }
    }, 
    "384": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2197504 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2197504 exceeds limit 600000',)"
            }
        }
    }, 
    "385": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 211200 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 211200 exceeds limit 30000',)"
            }
        }
    }, 
    "386": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1167360 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1167360 exceeds limit 30000',)"
            }
        }
    }, 
    "387": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 524320 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 524320 exceeds limit 30000',)"
            }
        }
    }, 
    "388": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2300032 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2300032 exceeds limit 600000',)"
            }
        }
    }, 
    "389": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "390": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2512000 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2512000 exceeds limit 600000',)"
            }
        }
    }, 
    "391": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "392": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.39512503147125244, 
            "svm_time": 25.066511154174805, 
            "slm_time": 4.2013020515441895, 
            "feat_shape": [
                800, 
                16, 
                23, 
                31
            ]
        }
    }, 
    "393": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.132750004529953, 
            "svm_time": 24.890159130096436, 
            "slm_time": 8.244465112686157, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "394": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 196608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 196608 exceeds limit 30000',)"
            }
        }
    }, 
    "395": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 549376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 549376 exceeds limit 30000',)"
            }
        }
    }, 
    "396": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.23533335328102112, 
            "svm_time": 24.809438943862915, 
            "slm_time": 13.365831136703491, 
            "feat_shape": [
                800, 
                64, 
                7, 
                11
            ]
        }
    }, 
    "397": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1167360 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1167360 exceeds limit 30000',)"
            }
        }
    }, 
    "398": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1115712 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1115712 exceeds limit 30000',)"
            }
        }
    }, 
    "399": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "400": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 196608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 196608 exceeds limit 30000',)"
            }
        }
    }, 
    "401": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 113152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 113152 exceeds limit 30000',)"
            }
        }
    }, 
    "402": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "403": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4327680 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4327680 exceeds limit 30000',)"
            }
        }
    }, 
    "404": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 291840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 291840 exceeds limit 30000',)"
            }
        }
    }, 
    "405": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2404864 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2404864 exceeds limit 600000',)"
            }
        }
    }, 
    "406": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2440320 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2440320 exceeds limit 30000',)"
            }
        }
    }, 
    "407": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2231424 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2231424 exceeds limit 30000',)"
            }
        }
    }, 
    "408": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 129024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 129024 exceeds limit 30000',)"
            }
        }
    }, 
    "409": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 575008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 575008 exceeds limit 30000',)"
            }
        }
    }, 
    "410": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 137344 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 137344 exceeds limit 30000',)"
            }
        }
    }, 
    "411": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2064384 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2064384 exceeds limit 600000',)"
            }
        }
    }, 
    "412": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05037499591708183, 
            "svm_time": 26.326624870300293, 
            "slm_time": 30.553728103637695, 
            "feat_shape": [
                800, 
                128, 
                11, 
                15
            ]
        }
    }, 
    "413": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 524320 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 524320 exceeds limit 30000',)"
            }
        }
    }, 
    "414": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4600064 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4600064 exceeds limit 600000',)"
            }
        }
    }, 
    "415": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1202432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1202432 exceeds limit 30000',)"
            }
        }
    }, 
    "416": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2231424 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2231424 exceeds limit 600000',)"
            }
        }
    }, 
    "417": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1184832 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1184832 exceeds limit 30000',)"
            }
        }
    }, 
    "418": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "419": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4462848 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4462848 exceeds limit 30000',)"
            }
        }
    }, 
    "420": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1202432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1202432 exceeds limit 30000',)"
            }
        }
    }, 
    "421": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06525000184774399, 
            "svm_time": 26.6161630153656, 
            "slm_time": 14.359917163848877, 
            "feat_shape": [
                800, 
                128, 
                12, 
                16
            ]
        }
    }, 
    "422": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1184832 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1184832 exceeds limit 30000',)"
            }
        }
    }, 
    "423": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 309504 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 309504 exceeds limit 30000',)"
            }
        }
    }, 
    "424": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1202432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1202432 exceeds limit 30000',)"
            }
        }
    }, 
    "425": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 249920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 249920 exceeds limit 30000',)"
            }
        }
    }, 
    "426": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2602916657924652, 
            "svm_time": 25.138440132141113, 
            "slm_time": 5.351650953292847, 
            "feat_shape": [
                800, 
                16, 
                13, 
                17
            ]
        }
    }, 
    "427": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 619008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 619008 exceeds limit 30000',)"
            }
        }
    }, 
    "428": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4880640 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4880640 exceeds limit 30000',)"
            }
        }
    }, 
    "429": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10325001180171967, 
            "svm_time": 27.06939196586609, 
            "slm_time": 21.973555088043213, 
            "feat_shape": [
                800, 
                64, 
                18, 
                26
            ]
        }
    }, 
    "430": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2197504 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2197504 exceeds limit 30000',)"
            }
        }
    }, 
    "431": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 66576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 66576 exceeds limit 30000',)"
            }
        }
    }, 
    "432": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2130432 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2130432 exceeds limit 30000',)"
            }
        }
    }, 
    "433": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4809728 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4809728 exceeds limit 30000',)"
            }
        }
    }, 
    "434": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 65664 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 65664 exceeds limit 30000',)"
            }
        }
    }, 
    "435": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 75152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 75152 exceeds limit 30000',)"
            }
        }
    }, 
    "436": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 5), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 5), (5, 5), True))"
            }
        }
    }, 
    "437": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.30674999952316284, 
            "svm_time": 25.72874116897583, 
            "slm_time": 4.451189994812012, 
            "feat_shape": [
                800, 
                16, 
                23, 
                31
            ]
        }
    }, 
    "438": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2197504 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2197504 exceeds limit 600000',)"
            }
        }
    }, 
    "439": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "440": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "441": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "442": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "443": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 117024 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 117024 exceeds limit 30000',)"
            }
        }
    }, 
    "444": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13587498664855957, 
            "svm_time": 25.23659086227417, 
            "slm_time": 12.027131080627441, 
            "feat_shape": [
                800, 
                32, 
                8, 
                12
            ]
        }
    }, 
    "445": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 6, 8), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 6, 8), (7, 7), True))"
            }
        }
    }, 
    "446": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.16624999046325684, 
            "svm_time": 25.170915842056274, 
            "slm_time": 7.384566068649292, 
            "feat_shape": [
                800, 
                256, 
                3, 
                7
            ]
        }
    }, 
    "447": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 300608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 300608 exceeds limit 30000',)"
            }
        }
    }, 
    "448": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06183333322405815, 
            "svm_time": 27.13949680328369, 
            "slm_time": 11.455325841903687, 
            "feat_shape": [
                800, 
                32, 
                25, 
                33
            ]
        }
    }, 
    "449": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4669440 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4669440 exceeds limit 30000',)"
            }
        }
    }, 
    "450": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 32256 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 32256 exceeds limit 30000',)"
            }
        }
    }, 
    "451": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 141600 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 141600 exceeds limit 30000',)"
            }
        }
    }, 
    "452": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 58512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 58512 exceeds limit 30000',)"
            }
        }
    }, 
    "453": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "454": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "455": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "456": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "457": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2440320 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2440320 exceeds limit 30000',)"
            }
        }
    }, 
    "458": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 283200 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 283200 exceeds limit 30000',)"
            }
        }
    }, 
    "459": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1032192 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1032192 exceeds limit 30000',)"
            }
        }
    }, 
    "460": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.20329171419143677, 
            "svm_time": 25.342875957489014, 
            "slm_time": 10.841558933258057, 
            "feat_shape": [
                800, 
                32, 
                7, 
                11
            ]
        }
    }, 
    "461": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 70800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 70800 exceeds limit 30000',)"
            }
        }
    }, 
    "462": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 91264 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 91264 exceeds limit 30000',)"
            }
        }
    }, 
    "463": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1982083022594452, 
            "svm_time": 26.479833126068115, 
            "slm_time": 5.067863941192627, 
            "feat_shape": [
                800, 
                16, 
                27, 
                35
            ]
        }
    }, 
    "464": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10420834273099899, 
            "svm_time": 25.41531205177307, 
            "slm_time": 9.403120040893555, 
            "feat_shape": [
                800, 
                128, 
                3, 
                5
            ]
        }
    }, 
    "465": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1081920 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1081920 exceeds limit 600000',)"
            }
        }
    }, 
    "466": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2334720 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2334720 exceeds limit 30000',)"
            }
        }
    }, 
    "467": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 168960 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 168960 exceeds limit 30000',)"
            }
        }
    }, 
    "468": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09391666203737259, 
            "svm_time": 27.109678030014038, 
            "slm_time": 12.288013219833374, 
            "feat_shape": [
                800, 
                32, 
                23, 
                31
            ]
        }
    }, 
    "469": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2334720 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2334720 exceeds limit 30000',)"
            }
        }
    }, 
    "470": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 137344 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 137344 exceeds limit 30000',)"
            }
        }
    }, 
    "471": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 2, 3), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 2, 3), (5, 5), True))"
            }
        }
    }, 
    "472": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.12558333575725555, 
            "svm_time": 26.621653079986572, 
            "slm_time": 4.724709987640381, 
            "feat_shape": [
                800, 
                16, 
                27, 
                35
            ]
        }
    }, 
    "473": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 483840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 483840 exceeds limit 30000',)"
            }
        }
    }, 
    "474": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 379008 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 379008 exceeds limit 30000',)"
            }
        }
    }, 
    "475": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "476": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4669440 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4669440 exceeds limit 600000',)"
            }
        }
    }, 
    "477": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 45632 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 45632 exceeds limit 30000',)"
            }
        }
    }, 
    "478": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.18020828068256378, 
            "svm_time": 25.598551988601685, 
            "slm_time": 11.9289710521698, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "479": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1115712 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1115712 exceeds limit 30000',)"
            }
        }
    }, 
    "480": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1115712 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1115712 exceeds limit 600000',)"
            }
        }
    }, 
    "481": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1065216 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1065216 exceeds limit 30000',)"
            }
        }
    }, 
    "482": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "483": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "484": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "485": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "486": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "487": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1220160 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1220160 exceeds limit 600000',)"
            }
        }
    }, 
    "488": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 274688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 274688 exceeds limit 30000',)"
            }
        }
    }, 
    "489": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2476032 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2476032 exceeds limit 600000',)"
            }
        }
    }, 
    "490": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "491": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1520833522081375, 
            "svm_time": 25.901333808898926, 
            "slm_time": 39.01421523094177, 
            "feat_shape": [
                800, 
                256, 
                2, 
                4
            ]
        }
    }, 
    "492": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2404864 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2404864 exceeds limit 600000',)"
            }
        }
    }, 
    "493": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.12262498587369919, 
            "svm_time": 26.60812997817993, 
            "slm_time": 17.82196807861328, 
            "feat_shape": [
                800, 
                64, 
                12, 
                16
            ]
        }
    }, 
    "494": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 549376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 549376 exceeds limit 30000',)"
            }
        }
    }, 
    "495": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 84480 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 84480 exceeds limit 30000',)"
            }
        }
    }, 
    "496": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 4260864 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 4260864 exceeds limit 30000',)"
            }
        }
    }, 
    "497": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1048640 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1048640 exceeds limit 600000',)"
            }
        }
    }, 
    "498": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 258048 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 258048 exceeds limit 30000',)"
            }
        }
    }, 
    "499": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1202432 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1202432 exceeds limit 600000',)"
            }
        }
    }, 
    "500": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "501": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "502": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "503": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "504": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "505": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "506": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "507": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "508": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "509": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "510": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "511": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "512": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "513": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 2, 3), (3, 3), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 2, 3), (3, 3), True))"
            }
        }
    }, 
    "514": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "515": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 2, 3), (3, 3), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 2, 3), (3, 3), True))"
            }
        }
    }, 
    "516": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.041041672229766846, 
            "svm_time": 26.31629991531372, 
            "slm_time": 30.180335998535156, 
            "feat_shape": [
                800, 
                128, 
                4, 
                6
            ]
        }
    }, 
    "517": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "518": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09683334082365036, 
            "svm_time": 26.532697916030884, 
            "slm_time": 37.19081211090088, 
            "feat_shape": [
                800, 
                128, 
                2, 
                4
            ]
        }
    }, 
    "519": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "520": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09683334082365036, 
            "svm_time": 26.704012870788574, 
            "slm_time": 37.15910506248474, 
            "feat_shape": [
                800, 
                128, 
                2, 
                4
            ]
        }
    }, 
    "521": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "522": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09683334082365036, 
            "svm_time": 26.673668146133423, 
            "slm_time": 37.29845094680786, 
            "feat_shape": [
                800, 
                128, 
                2, 
                4
            ]
        }
    }, 
    "523": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "524": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "525": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "526": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "527": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08879166096448898, 
            "svm_time": 26.77875590324402, 
            "slm_time": 20.69000005722046, 
            "feat_shape": [
                800, 
                128, 
                2, 
                4
            ]
        }
    }, 
    "528": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "529": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0717083141207695, 
            "svm_time": 27.073540210723877, 
            "slm_time": 27.30430793762207, 
            "feat_shape": [
                800, 
                256, 
                2, 
                4
            ]
        }
    }, 
    "530": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "531": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11412498354911804, 
            "svm_time": 27.166923999786377, 
            "slm_time": 20.758469104766846, 
            "feat_shape": [
                800, 
                128, 
                2, 
                4
            ]
        }
    }, 
    "532": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "533": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.046083319932222366, 
            "svm_time": 27.403334856033325, 
            "slm_time": 21.075639009475708, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "534": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.041041672229766846, 
            "svm_time": 27.41610598564148, 
            "slm_time": 30.381943941116333, 
            "feat_shape": [
                800, 
                128, 
                4, 
                6
            ]
        }
    }, 
    "535": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.057624995708465576, 
            "svm_time": 27.589729070663452, 
            "slm_time": 30.046321868896484, 
            "feat_shape": [
                800, 
                128, 
                4, 
                6
            ]
        }
    }, 
    "536": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.51610016822815, 
            "slm_time": 36.1610689163208, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "537": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.68065905570984, 
            "slm_time": 36.1113018989563, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "538": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.646817922592163, 
            "slm_time": 36.088014125823975, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "539": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.591782093048096, 
            "slm_time": 36.26271891593933, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "540": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.728636026382446, 
            "slm_time": 36.13612985610962, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "541": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.73283290863037, 
            "slm_time": 36.14924097061157, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "542": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.546869039535522, 
            "slm_time": 36.13564395904541, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "543": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.67232894897461, 
            "slm_time": 36.13171696662903, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "544": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.718333959579468, 
            "slm_time": 36.12491512298584, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "545": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.777812957763672, 
            "slm_time": 36.13732409477234, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "546": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.787554025650024, 
            "slm_time": 36.1485481262207, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "547": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.768828868865967, 
            "slm_time": 36.10100698471069, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "548": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.853801012039185, 
            "slm_time": 36.126864194869995, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "549": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.90372896194458, 
            "slm_time": 36.10606098175049, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "550": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.861963987350464, 
            "slm_time": 36.119338035583496, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "551": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 27.915220975875854, 
            "slm_time": 36.115272998809814, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "552": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.000750064849854, 
            "slm_time": 36.15824103355408, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "553": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.0992329120636, 
            "slm_time": 36.12596011161804, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "554": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.027868032455444, 
            "slm_time": 36.12616801261902, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "555": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.002526998519897, 
            "slm_time": 36.123512983322144, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "556": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.053481101989746, 
            "slm_time": 36.123339891433716, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "557": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.062057971954346, 
            "slm_time": 36.19853186607361, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "558": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.07141399383545, 
            "slm_time": 36.11443090438843, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "559": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.143162965774536, 
            "slm_time": 36.115859031677246, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "560": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.11962389945984, 
            "slm_time": 36.1061270236969, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "561": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.325657844543457, 
            "slm_time": 36.18722200393677, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "562": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.149258852005005, 
            "slm_time": 36.13651204109192, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "563": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.3111891746521, 
            "slm_time": 36.12278699874878, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "564": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.31373906135559, 
            "slm_time": 36.13281297683716, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "565": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.40177583694458, 
            "slm_time": 36.45947003364563, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "566": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.54912281036377, 
            "slm_time": 36.15560984611511, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "567": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.516995191574097, 
            "slm_time": 36.114728927612305, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "568": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.406474828720093, 
            "slm_time": 36.109644174575806, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "569": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.435110092163086, 
            "slm_time": 36.15176200866699, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "570": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.42905592918396, 
            "slm_time": 36.18018317222595, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "571": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.48569393157959, 
            "slm_time": 36.132954120635986, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "572": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.559990882873535, 
            "slm_time": 36.156315088272095, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "573": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.659127950668335, 
            "slm_time": 36.148699045181274, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "574": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.594754934310913, 
            "slm_time": 36.146064043045044, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "575": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.645068883895874, 
            "slm_time": 36.12251806259155, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "576": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.846882104873657, 
            "slm_time": 36.151012897491455, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "577": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.768824100494385, 
            "slm_time": 36.13142490386963, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "578": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.740973949432373, 
            "slm_time": 36.14078497886658, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "579": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.880531072616577, 
            "slm_time": 36.12474298477173, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "580": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.992561101913452, 
            "slm_time": 36.12476706504822, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "581": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.84913396835327, 
            "slm_time": 36.088321924209595, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "582": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.877320051193237, 
            "slm_time": 36.09088897705078, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "583": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.96473217010498, 
            "slm_time": 36.12109398841858, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "584": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 28.887722969055176, 
            "slm_time": 36.089621782302856, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "585": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.078561067581177, 
            "slm_time": 36.09199595451355, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "586": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.044697999954224, 
            "slm_time": 36.38017702102661, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "587": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.083438873291016, 
            "slm_time": 36.123112201690674, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "588": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.058227062225342, 
            "slm_time": 36.118531942367554, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "589": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.085304021835327, 
            "slm_time": 36.14042806625366, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "590": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.08117914199829, 
            "slm_time": 36.11156988143921, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "591": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.138870000839233, 
            "slm_time": 36.115235805511475, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "592": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.229690074920654, 
            "slm_time": 36.10699009895325, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "593": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.243333101272583, 
            "slm_time": 36.11633515357971, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "594": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.483153820037842, 
            "slm_time": 36.10008502006531, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "595": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.42598605155945, 
            "slm_time": 36.374435901641846, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "596": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.385294198989868, 
            "slm_time": 36.15937685966492, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "597": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.480281829833984, 
            "slm_time": 36.67072510719299, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "598": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.577083110809326, 
            "slm_time": 36.12014698982239, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "599": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.531062126159668, 
            "slm_time": 36.13978600502014, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "600": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.439846992492676, 
            "slm_time": 36.14402508735657, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "601": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.47040319442749, 
            "slm_time": 36.172685861587524, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "602": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.55748200416565, 
            "slm_time": 36.0783531665802, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "603": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.643322944641113, 
            "slm_time": 36.10308122634888, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "604": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.813805103302002, 
            "slm_time": 36.10681700706482, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "605": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.616073846817017, 
            "slm_time": 36.40633416175842, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "606": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.668287992477417, 
            "slm_time": 36.33179497718811, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "607": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.644073963165283, 
            "slm_time": 36.11495614051819, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "608": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.611337900161743, 
            "slm_time": 36.13984298706055, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "609": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.724817991256714, 
            "slm_time": 36.11699080467224, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "610": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.784263849258423, 
            "slm_time": 36.0912401676178, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "611": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.822570085525513, 
            "slm_time": 36.093340158462524, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "612": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.93648600578308, 
            "slm_time": 36.14024305343628, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "613": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.883899927139282, 
            "slm_time": 36.12283110618591, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "614": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.85860300064087, 
            "slm_time": 36.0972740650177, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "615": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.810325860977173, 
            "slm_time": 36.137439012527466, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "616": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.95824694633484, 
            "slm_time": 36.091864824295044, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "617": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 30.003633975982666, 
            "slm_time": 36.121082067489624, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "618": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 29.985043048858643, 
            "slm_time": 36.12069892883301, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "619": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 6, 8), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 6, 8), (7, 7), True))"
            }
        }
    }, 
    "620": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 30.10533094406128, 
            "slm_time": 36.477198123931885, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "621": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 30.076725006103516, 
            "slm_time": 36.111170053482056, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "622": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 30.098248958587646, 
            "slm_time": 36.560659885406494, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "623": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03462500125169754, 
            "svm_time": 30.164441108703613, 
            "slm_time": 36.08907413482666, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "624": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 30.96378493309021, 
            "slm_time": 35.48823094367981, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "625": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 30.893444776535034, 
            "slm_time": 35.49650001525879, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "626": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 30.862232208251953, 
            "slm_time": 36.42344284057617, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "627": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 30.97477889060974, 
            "slm_time": 35.520517110824585, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "628": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 30.914387941360474, 
            "slm_time": 35.534064054489136, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "629": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 30.921452045440674, 
            "slm_time": 35.50908613204956, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "630": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 30.976874113082886, 
            "slm_time": 35.54214096069336, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "631": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.115116119384766, 
            "slm_time": 35.51687788963318, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "632": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.09077787399292, 
            "slm_time": 35.520589113235474, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "633": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.148727893829346, 
            "slm_time": 35.51997709274292, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "634": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.133517026901245, 
            "slm_time": 35.51424789428711, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "635": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.270185947418213, 
            "slm_time": 35.510228872299194, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "636": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.052752017974854, 
            "slm_time": 35.51440787315369, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "637": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.05562996864319, 
            "slm_time": 35.526511907577515, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "638": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.05121898651123, 
            "slm_time": 35.53087091445923, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "639": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.06527590751648, 
            "slm_time": 35.51691699028015, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "640": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.216223001480103, 
            "slm_time": 35.51192378997803, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "641": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.22508692741394, 
            "slm_time": 35.55132603645325, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "642": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.142952919006348, 
            "slm_time": 35.7250440120697, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "643": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.12179398536682, 
            "slm_time": 35.50918793678284, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "644": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.2703640460968, 
            "slm_time": 35.54679608345032, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "645": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.283295154571533, 
            "slm_time": 35.51666188240051, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "646": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018999993801116943, 
            "svm_time": 31.45909810066223, 
            "slm_time": 35.492690086364746, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "647": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.250752925872803, 
            "slm_time": 35.60870909690857, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "648": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.161493062973022, 
            "slm_time": 35.56739783287048, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "649": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.104578018188477, 
            "slm_time": 35.511303186416626, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "650": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.222824096679688, 
            "slm_time": 35.52106595039368, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "651": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.193746089935303, 
            "slm_time": 35.52341294288635, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "652": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.387017011642456, 
            "slm_time": 35.522730112075806, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "653": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.346796989440918, 
            "slm_time": 35.52309513092041, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "654": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.416008949279785, 
            "slm_time": 35.52104091644287, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "655": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.475400924682617, 
            "slm_time": 35.54230189323425, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "656": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.433769941329956, 
            "slm_time": 35.530519008636475, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "657": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.646748065948486, 
            "slm_time": 35.816664934158325, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "658": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.59456992149353, 
            "slm_time": 35.82428503036499, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "659": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.56585383415222, 
            "slm_time": 35.60328483581543, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "660": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01733332686126232, 
            "svm_time": 31.581740140914917, 
            "slm_time": 39.25191593170166, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "661": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.678326845169067, 
            "slm_time": 35.597208976745605, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "662": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.713732957839966, 
            "slm_time": 35.6596999168396, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "663": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.696025848388672, 
            "slm_time": 35.52188801765442, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "664": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.734632968902588, 
            "slm_time": 35.545461893081665, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "665": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.758151054382324, 
            "slm_time": 35.48578095436096, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "666": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.754448175430298, 
            "slm_time": 35.50403189659119, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "667": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.730584859848022, 
            "slm_time": 35.99922704696655, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "668": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.858126163482666, 
            "slm_time": 35.48076796531677, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "669": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01733332686126232, 
            "svm_time": 31.83690595626831, 
            "slm_time": 39.104459047317505, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "670": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879165880382061, 
            "svm_time": 31.73685097694397, 
            "slm_time": 26.64180898666382, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "671": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.96294903755188, 
            "slm_time": 35.51950001716614, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "672": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 31.90035891532898, 
            "slm_time": 35.50380611419678, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "673": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.05273389816284, 
            "slm_time": 35.50663495063782, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "674": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.03070902824402, 
            "slm_time": 35.514790058135986, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "675": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.0235960483551, 
            "slm_time": 35.54486083984375, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "676": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.00141882896423, 
            "slm_time": 35.540874004364014, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "677": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.01492190361023, 
            "slm_time": 35.56114101409912, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "678": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.027541661635041237, 
            "svm_time": 32.086556911468506, 
            "slm_time": 27.61903715133667, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "679": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.08809185028076, 
            "slm_time": 35.58274793624878, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "680": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.12407898902893, 
            "slm_time": 35.514734983444214, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "681": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.11232399940491, 
            "slm_time": 35.51497220993042, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "682": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.22017002105713, 
            "slm_time": 35.52740812301636, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "683": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.21660804748535, 
            "slm_time": 35.5159649848938, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "684": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.19767189025879, 
            "slm_time": 35.495431900024414, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "685": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "686": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.391427993774414, 
            "slm_time": 35.448498010635376, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "687": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01733332686126232, 
            "svm_time": 32.21979904174805, 
            "slm_time": 39.09765911102295, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "688": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879165880382061, 
            "svm_time": 32.30204486846924, 
            "slm_time": 26.598904132843018, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "689": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.568777084350586, 
            "slm_time": 35.53299880027771, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "690": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.546005964279175, 
            "slm_time": 35.53920102119446, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "691": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03624999523162842, 
            "svm_time": 32.44062304496765, 
            "slm_time": 25.15243101119995, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "692": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.57422089576721, 
            "slm_time": 35.511687994003296, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "693": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.52083206176758, 
            "slm_time": 35.54597306251526, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "694": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.57129788398743, 
            "slm_time": 35.53144407272339, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "695": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "696": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01733332686126232, 
            "svm_time": 32.62706995010376, 
            "slm_time": 39.09016704559326, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "697": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.81960916519165, 
            "slm_time": 35.487241983413696, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "698": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.9201819896698, 
            "slm_time": 35.76681709289551, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "699": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879165880382061, 
            "svm_time": 32.7228741645813, 
            "slm_time": 26.916067838668823, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "700": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 32.81487798690796, 
            "slm_time": 35.53899312019348, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "701": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879166252911091, 
            "svm_time": 32.859248876571655, 
            "slm_time": 46.04966711997986, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "702": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03624999523162842, 
            "svm_time": 32.83106589317322, 
            "slm_time": 25.823695182800293, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "703": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.12024998664856, 
            "slm_time": 35.52158808708191, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "704": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.19301390647888, 
            "slm_time": 35.710870027542114, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "705": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.25492310523987, 
            "slm_time": 35.4855010509491, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "706": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "707": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.38418221473694, 
            "slm_time": 35.49367594718933, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "708": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.15464210510254, 
            "slm_time": 35.490849018096924, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "709": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.28290104866028, 
            "slm_time": 35.48843693733215, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "710": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.28616499900818, 
            "slm_time": 35.48319983482361, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "711": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02308332547545433, 
            "svm_time": 33.27835202217102, 
            "slm_time": 28.926505088806152, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "712": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020833326503634453, 
            "svm_time": 33.37646293640137, 
            "slm_time": 34.83492088317871, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "713": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03624999523162842, 
            "svm_time": 33.18545985221863, 
            "slm_time": 25.11961007118225, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "714": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.31352186203003, 
            "slm_time": 35.522173166275024, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "715": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.31151819229126, 
            "slm_time": 35.54331588745117, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "716": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09591665863990784, 
            "svm_time": 33.3215708732605, 
            "slm_time": 37.51345920562744, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "717": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "718": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05975000560283661, 
            "svm_time": 33.30711483955383, 
            "slm_time": 34.15972304344177, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "719": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.52567005157471, 
            "slm_time": 35.945598125457764, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "720": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.76413607597351, 
            "slm_time": 35.51164507865906, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "721": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 6), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 6), (7, 7), True))"
            }
        }
    }, 
    "722": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11287499219179153, 
            "svm_time": 33.615013122558594, 
            "slm_time": 27.30429697036743, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "723": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "724": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03624999523162842, 
            "svm_time": 33.48108196258545, 
            "slm_time": 25.12719202041626, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "725": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.787346839904785, 
            "slm_time": 35.506558895111084, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "726": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09591665863990784, 
            "svm_time": 33.71755909919739, 
            "slm_time": 37.52711796760559, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "727": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 33.92775797843933, 
            "slm_time": 35.52019810676575, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "728": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "729": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14683334529399872, 
            "svm_time": 34.11355495452881, 
            "slm_time": 33.7740159034729, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "730": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020833326503634453, 
            "svm_time": 33.892130851745605, 
            "slm_time": 34.68028211593628, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "731": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "732": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09220833331346512, 
            "svm_time": 33.92786884307861, 
            "slm_time": 42.146512031555176, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "733": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "734": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879165880382061, 
            "svm_time": 33.947144985198975, 
            "slm_time": 26.58372712135315, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "735": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.033416662365198135, 
            "svm_time": 33.96066689491272, 
            "slm_time": 25.129717111587524, 
            "feat_shape": [
                800, 
                32, 
                9, 
                13
            ]
        }
    }, 
    "736": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 34.37209510803223, 
            "slm_time": 35.49437499046326, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "737": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0977083295583725, 
            "svm_time": 34.34277892112732, 
            "slm_time": 37.55317711830139, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "738": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020833326503634453, 
            "svm_time": 34.301928997039795, 
            "slm_time": 34.73521900177002, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "739": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "740": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05975000560283661, 
            "svm_time": 34.351994037628174, 
            "slm_time": 33.705893993377686, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "741": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879166252911091, 
            "svm_time": 34.41986799240112, 
            "slm_time": 43.77423095703125, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "742": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "743": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 6, 8), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 6, 8), (9, 9), True))"
            }
        }
    }, 
    "744": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01941666193306446, 
            "svm_time": 34.5108699798584, 
            "slm_time": 26.654627084732056, 
            "feat_shape": [
                800, 
                64, 
                9, 
                13
            ]
        }
    }, 
    "745": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 34.73011898994446, 
            "slm_time": 35.51057505607605, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "746": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03624999523162842, 
            "svm_time": 34.62193512916565, 
            "slm_time": 25.161187887191772, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "747": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02566666528582573, 
            "svm_time": 34.57287883758545, 
            "slm_time": 39.19413208961487, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "748": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10641667991876602, 
            "svm_time": 34.92968988418579, 
            "slm_time": 44.736549854278564, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "749": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "750": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "751": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05975000560283661, 
            "svm_time": 35.110544204711914, 
            "slm_time": 33.924378871917725, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "752": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879166252911091, 
            "svm_time": 34.94498896598816, 
            "slm_time": 43.738203048706055, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "753": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 42240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 42240 exceeds limit 30000',)"
            }
        }
    }, 
    "754": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 6), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 6), (7, 7), True))"
            }
        }
    }, 
    "755": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09829165041446686, 
            "svm_time": 35.00077199935913, 
            "slm_time": 24.944554805755615, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "756": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "757": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06129166856408119, 
            "svm_time": 35.01355314254761, 
            "slm_time": 25.24368190765381, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "758": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01733332686126232, 
            "svm_time": 35.17676091194153, 
            "slm_time": 39.13156795501709, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "759": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10641667991876602, 
            "svm_time": 35.49260401725769, 
            "slm_time": 44.631752014160156, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "760": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 35.63994383811951, 
            "slm_time": 35.48068904876709, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "761": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "762": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "763": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06083333492279053, 
            "svm_time": 36.264132022857666, 
            "slm_time": 42.026098012924194, 
            "feat_shape": [
                800, 
                256, 
                6, 
                10
            ]
        }
    }, 
    "764": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07912499457597733, 
            "svm_time": 35.71100997924805, 
            "slm_time": 35.95756506919861, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "765": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 35.662708044052124, 
            "slm_time": 35.499626874923706, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "766": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 4, 6), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 4, 6), (7, 7), True))"
            }
        }
    }, 
    "767": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0924999862909317, 
            "svm_time": 35.69300699234009, 
            "slm_time": 33.89682197570801, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "768": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "769": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01733332686126232, 
            "svm_time": 35.798774003982544, 
            "slm_time": 39.10328507423401, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "770": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1145833432674408, 
            "svm_time": 36.19264578819275, 
            "slm_time": 56.168233156204224, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "771": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.021708328276872635, 
            "svm_time": 37.52540898323059, 
            "slm_time": 35.465264081954956, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "772": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08245834708213806, 
            "svm_time": 36.0997269153595, 
            "slm_time": 33.893943071365356, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "773": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "774": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06445832550525665, 
            "svm_time": 36.193371057510376, 
            "slm_time": 41.92521905899048, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "775": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 36.57948398590088, 
            "slm_time": 35.50677680969238, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "776": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.049791667610406876, 
            "svm_time": 36.99572396278381, 
            "slm_time": 42.719642877578735, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "777": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "778": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "779": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2943333685398102, 
            "svm_time": 36.52251386642456, 
            "slm_time": 23.51121687889099, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "780": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017249993979930878, 
            "svm_time": 38.14873909950256, 
            "slm_time": 39.217082023620605, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "781": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 5), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 5), (9, 9), True))"
            }
        }
    }, 
    "782": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11316665261983871, 
            "svm_time": 38.59061408042908, 
            "slm_time": 43.0973060131073, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "783": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020833326503634453, 
            "svm_time": 36.74251317977905, 
            "slm_time": 34.73443794250488, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "784": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "785": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.09570598602295, 
            "slm_time": 35.4779999256134, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "786": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.03173613548279, 
            "slm_time": 35.527201890945435, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "787": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.076632022857666, 
            "slm_time": 35.54423809051514, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "788": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.11819005012512, 
            "slm_time": 35.5596399307251, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "789": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 36.9951958656311, 
            "slm_time": 35.53699517250061, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "790": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.018604040145874, 
            "slm_time": 35.53925704956055, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "791": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.112937927246094, 
            "slm_time": 35.528825998306274, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "792": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.10225796699524, 
            "slm_time": 35.541954040527344, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "793": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.094825983047485, 
            "slm_time": 35.56140208244324, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "794": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 36.94721508026123, 
            "slm_time": 35.58517289161682, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "795": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.23852300643921, 
            "slm_time": 35.526090145111084, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "796": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.34073209762573, 
            "slm_time": 35.53914189338684, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "797": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.331684827804565, 
            "slm_time": 35.488362073898315, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "798": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.307673931121826, 
            "slm_time": 35.56005597114563, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "799": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.233806848526, 
            "slm_time": 36.237104177474976, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "800": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.275168895721436, 
            "slm_time": 35.49432110786438, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "801": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.426804065704346, 
            "slm_time": 36.32821011543274, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "802": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "803": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.49267315864563, 
            "slm_time": 35.70728588104248, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "804": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.467041015625, 
            "slm_time": 35.5433030128479, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "805": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.41746807098389, 
            "slm_time": 35.523350954055786, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "806": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.34337592124939, 
            "slm_time": 35.517199993133545, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "807": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.45412802696228, 
            "slm_time": 35.50527000427246, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "808": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03345833346247673, 
            "svm_time": 37.82996582984924, 
            "slm_time": 35.50287485122681, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "809": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.54012608528137, 
            "slm_time": 35.5138258934021, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "810": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "811": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02308332547545433, 
            "svm_time": 37.64200806617737, 
            "slm_time": 28.958254098892212, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "812": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "813": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03624999523162842, 
            "svm_time": 37.935617208480835, 
            "slm_time": 25.14476704597473, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "814": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.733062982559204, 
            "slm_time": 35.5281400680542, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "815": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0924999862909317, 
            "svm_time": 37.73512601852417, 
            "slm_time": 33.98519802093506, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "816": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017249993979930878, 
            "svm_time": 39.16520118713379, 
            "slm_time": 39.51016092300415, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "817": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14683334529399872, 
            "svm_time": 37.73614978790283, 
            "slm_time": 33.847153186798096, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "818": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "819": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07912499457597733, 
            "svm_time": 37.97223401069641, 
            "slm_time": 35.90548801422119, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "820": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 37.91927886009216, 
            "slm_time": 35.51094102859497, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "821": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02695833332836628, 
            "svm_time": 37.91226100921631, 
            "slm_time": 32.04646015167236, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "822": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "823": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02308332547545433, 
            "svm_time": 37.959168910980225, 
            "slm_time": 28.955161809921265, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "824": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "825": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.019333330914378166, 
            "svm_time": 38.01424789428711, 
            "slm_time": 35.625784158706665, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "826": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05024999380111694, 
            "svm_time": 37.94088006019592, 
            "slm_time": 25.18938899040222, 
            "feat_shape": [
                800, 
                32, 
                8, 
                12
            ]
        }
    }, 
    "827": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10337500274181366, 
            "svm_time": 38.4277708530426, 
            "slm_time": 42.777350187301636, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "828": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08670834451913834, 
            "svm_time": 38.276597023010254, 
            "slm_time": 37.60566020011902, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "829": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "830": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "831": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013083325698971748, 
            "svm_time": 38.3672890663147, 
            "slm_time": 35.47366499900818, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "832": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.051249995827674866, 
            "svm_time": 38.22590208053589, 
            "slm_time": 33.86863708496094, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "833": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.049791667610406876, 
            "svm_time": 38.71628785133362, 
            "slm_time": 42.792763233184814, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "834": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "835": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11287499219179153, 
            "svm_time": 38.32155704498291, 
            "slm_time": 27.334737062454224, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "836": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09725000709295273, 
            "svm_time": 38.196030139923096, 
            "slm_time": 36.910035848617554, 
            "feat_shape": [
                800, 
                256, 
                1, 
                5
            ]
        }
    }, 
    "837": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04095832258462906, 
            "svm_time": 38.34046792984009, 
            "slm_time": 25.125205039978027, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "838": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0963750034570694, 
            "svm_time": 38.37739086151123, 
            "slm_time": 32.0683388710022, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "839": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020958328619599342, 
            "svm_time": 38.43265104293823, 
            "slm_time": 6.083858966827393, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "840": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11316665261983871, 
            "svm_time": 38.98250222206116, 
            "slm_time": 42.72814989089966, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "841": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 6), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 6), (5, 5), True))"
            }
        }
    }, 
    "842": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "843": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0637499988079071, 
            "svm_time": 38.84999394416809, 
            "slm_time": 45.26956796646118, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "844": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 256, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04349999502301216, 
            "svm_time": 38.932780027389526, 
            "slm_time": 31.306414127349854, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "845": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 38.860113859176636, 
            "slm_time": 7.731748104095459, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "846": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.12658333778381348, 
            "svm_time": 38.95750713348389, 
            "slm_time": 8.208532094955444, 
            "feat_shape": [
                800, 
                256, 
                2, 
                6
            ]
        }
    }, 
    "847": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05787498876452446, 
            "svm_time": 38.87073588371277, 
            "slm_time": 9.716551065444946, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "848": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01983332447707653, 
            "svm_time": 39.064998149871826, 
            "slm_time": 6.510380029678345, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "849": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 6), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 6), (9, 9), True))"
            }
        }
    }, 
    "850": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2670833468437195, 
            "svm_time": 38.930952072143555, 
            "slm_time": 5.804164171218872, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "851": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.035249996930360794, 
            "svm_time": 39.68430805206299, 
            "slm_time": 7.698205947875977, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "852": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.087536096572876, 
            "slm_time": 7.762825965881348, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "853": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015708325430750847, 
            "svm_time": 38.95610690116882, 
            "slm_time": 8.72981595993042, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "854": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.15004168450832367, 
            "svm_time": 38.883930921554565, 
            "slm_time": 9.61663007736206, 
            "feat_shape": [
                800, 
                256, 
                2, 
                4
            ]
        }
    }, 
    "855": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "856": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.021636962890625, 
            "slm_time": 7.71125602722168, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "857": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018083328381180763, 
            "svm_time": 38.95947504043579, 
            "slm_time": 8.380405902862549, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "858": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01554165966808796, 
            "svm_time": 40.78164005279541, 
            "slm_time": 7.914171934127808, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "859": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07920833677053452, 
            "svm_time": 39.08535623550415, 
            "slm_time": 8.707798957824707, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "860": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "861": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.12653303146362, 
            "slm_time": 7.752154111862183, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "862": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 6, 8), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 6, 8), (9, 9), True))"
            }
        }
    }, 
    "863": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2957083582878113, 
            "svm_time": 39.414101123809814, 
            "slm_time": 6.7822558879852295, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "864": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.059708330780267715, 
            "svm_time": 39.05510997772217, 
            "slm_time": 8.117691993713379, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "865": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.08590483665466, 
            "slm_time": 7.7543230056762695, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "866": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.025208327919244766, 
            "svm_time": 39.06813406944275, 
            "slm_time": 9.585514068603516, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "867": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02762499824166298, 
            "svm_time": 39.101109981536865, 
            "slm_time": 6.628733158111572, 
            "feat_shape": [
                800, 
                16, 
                8, 
                12
            ]
        }
    }, 
    "868": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05354166403412819, 
            "svm_time": 39.464418172836304, 
            "slm_time": 8.164210796356201, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "869": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023749997839331627, 
            "svm_time": 39.123048067092896, 
            "slm_time": 7.838893890380859, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "870": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08941667526960373, 
            "svm_time": 39.07505989074707, 
            "slm_time": 7.250605821609497, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "871": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "872": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07900001108646393, 
            "svm_time": 39.20444083213806, 
            "slm_time": 7.038542032241821, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "873": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07520833611488342, 
            "svm_time": 39.201592206954956, 
            "slm_time": 7.762027978897095, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "874": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.056999996304512024, 
            "svm_time": 39.21019005775452, 
            "slm_time": 7.906353950500488, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "875": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2018750011920929, 
            "svm_time": 39.155072927474976, 
            "slm_time": 6.24462103843689, 
            "feat_shape": [
                800, 
                32, 
                6, 
                8
            ]
        }
    }, 
    "876": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.029291672632098198, 
            "svm_time": 39.25370407104492, 
            "slm_time": 9.155249834060669, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "877": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06312499195337296, 
            "svm_time": 39.65237498283386, 
            "slm_time": 7.995373964309692, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "878": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10254166275262833, 
            "svm_time": 39.89808392524719, 
            "slm_time": 9.254623174667358, 
            "feat_shape": [
                800, 
                256, 
                6, 
                10
            ]
        }
    }, 
    "879": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "880": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.26999497413635, 
            "slm_time": 7.716971158981323, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "881": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.23492503166199, 
            "slm_time": 7.775681972503662, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "882": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09129168093204498, 
            "svm_time": 39.77116012573242, 
            "slm_time": 8.261348962783813, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "883": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.33787488937378, 
            "slm_time": 7.750599145889282, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "884": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.257250040769577, 
            "svm_time": 39.291460037231445, 
            "slm_time": 8.060800075531006, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "885": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "886": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018083328381180763, 
            "svm_time": 39.32554602622986, 
            "slm_time": 7.935649871826172, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "887": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.12849999964237213, 
            "svm_time": 39.455896854400635, 
            "slm_time": 7.172515869140625, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "888": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.39182496070862, 
            "slm_time": 7.735140085220337, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "889": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "890": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0727916806936264, 
            "svm_time": 39.46430993080139, 
            "slm_time": 9.780349016189575, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "891": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01554165966808796, 
            "svm_time": 41.26699614524841, 
            "slm_time": 7.806894063949585, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "892": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "893": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06845834106206894, 
            "svm_time": 39.401942014694214, 
            "slm_time": 7.583179950714111, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "894": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.563032150268555, 
            "slm_time": 7.734969854354858, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "895": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05504167452454567, 
            "svm_time": 39.656765937805176, 
            "slm_time": 7.795111179351807, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "896": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.056999996304512024, 
            "svm_time": 39.53343200683594, 
            "slm_time": 7.891556024551392, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "897": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13474997878074646, 
            "svm_time": 39.46624684333801, 
            "slm_time": 6.134315013885498, 
            "feat_shape": [
                800, 
                64, 
                7, 
                9
            ]
        }
    }, 
    "898": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.15929168462753296, 
            "svm_time": 39.60140800476074, 
            "slm_time": 7.711712837219238, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "899": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 39.57519602775574, 
            "slm_time": 7.734088897705078, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "900": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013458327390253544, 
            "svm_time": 39.45815396308899, 
            "slm_time": 6.329786062240601, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "901": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07520833611488342, 
            "svm_time": 39.66202688217163, 
            "slm_time": 7.485042095184326, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "902": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022416656836867332, 
            "svm_time": 41.41370105743408, 
            "slm_time": 7.80340313911438, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "903": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015708325430750847, 
            "svm_time": 39.66920495033264, 
            "slm_time": 8.172100067138672, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "904": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02529166266322136, 
            "svm_time": 39.66620707511902, 
            "slm_time": 7.275277137756348, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "905": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "906": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11391666531562805, 
            "svm_time": 39.56751585006714, 
            "slm_time": 8.983585119247437, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "907": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0533333346247673, 
            "svm_time": 39.794975996017456, 
            "slm_time": 7.932841062545776, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "908": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06829167902469635, 
            "svm_time": 39.695738077163696, 
            "slm_time": 7.7243030071258545, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "909": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03870832920074463, 
            "svm_time": 39.72660803794861, 
            "slm_time": 7.260398864746094, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "910": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017916658893227577, 
            "svm_time": 39.82785487174988, 
            "slm_time": 8.72686219215393, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "911": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023749997839331627, 
            "svm_time": 39.74193501472473, 
            "slm_time": 7.6127028465271, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "912": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07691667228937149, 
            "svm_time": 39.923370122909546, 
            "slm_time": 5.556869029998779, 
            "feat_shape": [
                800, 
                64, 
                11, 
                15
            ]
        }
    }, 
    "913": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018208326771855354, 
            "svm_time": 39.58008408546448, 
            "slm_time": 6.27751088142395, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "914": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018083328381180763, 
            "svm_time": 39.85420799255371, 
            "slm_time": 7.938780069351196, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "915": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09354166686534882, 
            "svm_time": 39.804117918014526, 
            "slm_time": 8.76463007926941, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "916": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04658331722021103, 
            "svm_time": 39.81741690635681, 
            "slm_time": 7.841096878051758, 
            "feat_shape": [
                800, 
                128, 
                3, 
                5
            ]
        }
    }, 
    "917": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05504167452454567, 
            "svm_time": 39.81494498252869, 
            "slm_time": 7.810801029205322, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "918": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "919": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.19958332180976868, 
            "svm_time": 39.95176982879639, 
            "slm_time": 7.354901075363159, 
            "feat_shape": [
                800, 
                256, 
                4, 
                5
            ]
        }
    }, 
    "920": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03870832920074463, 
            "svm_time": 39.9094660282135, 
            "slm_time": 6.903059959411621, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "921": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09212501347064972, 
            "svm_time": 39.971656799316406, 
            "slm_time": 8.197448015213013, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "922": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 40.048726081848145, 
            "slm_time": 7.733880043029785, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "923": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01554165966808796, 
            "svm_time": 41.815221071243286, 
            "slm_time": 7.827787160873413, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "924": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018208330497145653, 
            "svm_time": 40.09443807601929, 
            "slm_time": 8.0031259059906, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "925": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06329165399074554, 
            "svm_time": 39.80538606643677, 
            "slm_time": 6.25932502746582, 
            "feat_shape": [
                800, 
                64, 
                6, 
                8
            ]
        }
    }, 
    "926": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "927": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020708328112959862, 
            "svm_time": 40.215049028396606, 
            "slm_time": 9.43376898765564, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "928": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0188749972730875, 
            "svm_time": 40.065711975097656, 
            "slm_time": 8.052284002304077, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "929": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17370833456516266, 
            "svm_time": 40.16486096382141, 
            "slm_time": 8.61793303489685, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "930": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.24595831334590912, 
            "svm_time": 40.04804587364197, 
            "slm_time": 7.4935691356658936, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "931": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.021208329126238823, 
            "svm_time": 40.23278093338013, 
            "slm_time": 6.602935075759888, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "932": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "933": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04783333092927933, 
            "svm_time": 40.20542287826538, 
            "slm_time": 10.38090181350708, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "934": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.030750000849366188, 
            "svm_time": 41.437440156936646, 
            "slm_time": 7.302983999252319, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "935": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 40.17303204536438, 
            "slm_time": 8.430804014205933, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "936": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08941667526960373, 
            "svm_time": 40.292888164520264, 
            "slm_time": 7.852905988693237, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "937": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020041663199663162, 
            "svm_time": 40.16645002365112, 
            "slm_time": 7.268952131271362, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "938": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02395833097398281, 
            "svm_time": 40.2907600402832, 
            "slm_time": 7.793191909790039, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "939": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "940": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17604167759418488, 
            "svm_time": 40.35168719291687, 
            "slm_time": 7.741734981536865, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "941": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2072499841451645, 
            "svm_time": 40.19665598869324, 
            "slm_time": 7.832611083984375, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "942": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022083332762122154, 
            "svm_time": 40.18087601661682, 
            "slm_time": 7.088228940963745, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "943": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018208330497145653, 
            "svm_time": 40.429094076156616, 
            "slm_time": 8.001585960388184, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "944": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.12849999964237213, 
            "svm_time": 40.378520011901855, 
            "slm_time": 7.155349969863892, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "945": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "946": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 40.61083006858826, 
            "slm_time": 7.683157920837402, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "947": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05354166403412819, 
            "svm_time": 40.83486986160278, 
            "slm_time": 8.17928409576416, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "948": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018583325669169426, 
            "svm_time": 40.361562967300415, 
            "slm_time": 8.085211992263794, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "949": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06366665661334991, 
            "svm_time": 40.519322872161865, 
            "slm_time": 7.320868968963623, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "950": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "951": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13870835304260254, 
            "svm_time": 40.48157215118408, 
            "slm_time": 9.91882586479187, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "952": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "953": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.16037501394748688, 
            "svm_time": 41.059139013290405, 
            "slm_time": 7.322169065475464, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "954": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08941667526960373, 
            "svm_time": 40.504361152648926, 
            "slm_time": 7.265346050262451, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "955": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023749997839331627, 
            "svm_time": 40.55198097229004, 
            "slm_time": 7.633398056030273, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "956": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013208326883614063, 
            "svm_time": 40.59350919723511, 
            "slm_time": 7.832404851913452, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "957": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022083332762122154, 
            "svm_time": 40.467714071273804, 
            "slm_time": 7.042989015579224, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "958": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 6, 10), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 6, 10), (9, 9), True))"
            }
        }
    }, 
    "959": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "960": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07233334332704544, 
            "svm_time": 40.81038498878479, 
            "slm_time": 7.568758964538574, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "961": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03550000116229057, 
            "svm_time": 40.66904902458191, 
            "slm_time": 7.599138975143433, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "962": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11091665178537369, 
            "svm_time": 41.17051315307617, 
            "slm_time": 8.241984844207764, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "963": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "964": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 40.69682002067566, 
            "slm_time": 7.728065013885498, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "965": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 4, 6), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 4, 6), (5, 5), True))"
            }
        }
    }, 
    "966": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04208332300186157, 
            "svm_time": 40.91300320625305, 
            "slm_time": 7.02938985824585, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "967": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05354166403412819, 
            "svm_time": 41.15281105041504, 
            "slm_time": 8.169843912124634, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "968": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01879166252911091, 
            "svm_time": 40.87278413772583, 
            "slm_time": 7.437524080276489, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "969": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07612500339746475, 
            "svm_time": 42.383694887161255, 
            "slm_time": 7.375497102737427, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "970": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "971": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 6, 8), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 6, 8), (7, 7), True))"
            }
        }
    }, 
    "972": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07520833611488342, 
            "svm_time": 40.85748910903931, 
            "slm_time": 7.542840957641602, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "973": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "974": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08416666090488434, 
            "svm_time": 40.72347903251648, 
            "slm_time": 7.4971840381622314, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "975": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "976": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0404166653752327, 
            "svm_time": 40.91974115371704, 
            "slm_time": 6.320424795150757, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "977": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 6), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 6), (5, 5), True))"
            }
        }
    }, 
    "978": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 40.91774106025696, 
            "slm_time": 7.745192050933838, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "979": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01554165966808796, 
            "svm_time": 42.8844850063324, 
            "slm_time": 7.799967050552368, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "980": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.025083331391215324, 
            "svm_time": 40.90600800514221, 
            "slm_time": 6.354305028915405, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "981": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06312499195337296, 
            "svm_time": 41.40116095542908, 
            "slm_time": 7.798765182495117, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "982": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0338750034570694, 
            "svm_time": 40.83854103088379, 
            "slm_time": 7.454528093338013, 
            "feat_shape": [
                800, 
                128, 
                4, 
                6
            ]
        }
    }, 
    "983": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0884583443403244, 
            "svm_time": 41.004534006118774, 
            "slm_time": 7.3839709758758545, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "984": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "985": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022374993190169334, 
            "svm_time": 41.05873417854309, 
            "slm_time": 8.201198816299438, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "986": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.18045835196971893, 
            "svm_time": 41.473203897476196, 
            "slm_time": 7.517246961593628, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "987": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.035499997437000275, 
            "svm_time": 40.99692392349243, 
            "slm_time": 9.796345949172974, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "988": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 6), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 6), (5, 5), True))"
            }
        }
    }, 
    "989": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "990": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 6, 8), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 6, 8), (7, 7), True))"
            }
        }
    }, 
    "991": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05012499541044235, 
            "svm_time": 42.87840795516968, 
            "slm_time": 7.964824199676514, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "992": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05112497881054878, 
            "svm_time": 40.96918606758118, 
            "slm_time": 5.4819090366363525, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "993": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05795832723379135, 
            "svm_time": 41.05230402946472, 
            "slm_time": 17.855814933776855, 
            "feat_shape": [
                800, 
                256, 
                4, 
                8
            ]
        }
    }, 
    "994": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02383332885801792, 
            "svm_time": 41.10890197753906, 
            "slm_time": 8.7531418800354, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "995": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.040333330631256104, 
            "svm_time": 41.59440803527832, 
            "slm_time": 8.219641208648682, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "996": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "997": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "998": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.38125801086426, 
            "slm_time": 7.7521748542785645, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "999": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 5), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 5), (9, 9), True))"
            }
        }
    }, 
    "1000": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 4, 6), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 4, 6), (5, 5), True))"
            }
        }
    }, 
    "1001": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 8, 12), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 8, 12), (9, 9), True))"
            }
        }
    }, 
    "1002": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04970831796526909, 
            "svm_time": 41.424124002456665, 
            "slm_time": 6.4094178676605225, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "1003": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08391667157411575, 
            "svm_time": 41.8775429725647, 
            "slm_time": 17.820223093032837, 
            "feat_shape": [
                800, 
                256, 
                5, 
                9
            ]
        }
    }, 
    "1004": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11829163879156113, 
            "svm_time": 41.3347110748291, 
            "slm_time": 9.792148113250732, 
            "feat_shape": [
                800, 
                256, 
                2, 
                4
            ]
        }
    }, 
    "1005": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1288749873638153, 
            "svm_time": 41.36660718917847, 
            "slm_time": 5.055276870727539, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "1006": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0677499920129776, 
            "svm_time": 41.71501898765564, 
            "slm_time": 9.632016897201538, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1007": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.355319023132324, 
            "slm_time": 7.984356880187988, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1008": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1009": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "1010": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1011": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13825000822544098, 
            "svm_time": 41.53515005111694, 
            "slm_time": 8.081264019012451, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1012": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023374997079372406, 
            "svm_time": 42.093509912490845, 
            "slm_time": 9.645950078964233, 
            "feat_shape": [
                800, 
                256, 
                6, 
                10
            ]
        }
    }, 
    "1013": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 49152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 49152 exceeds limit 30000',)"
            }
        }
    }, 
    "1014": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 241920 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 241920 exceeds limit 30000',)"
            }
        }
    }, 
    "1015": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02395833097398281, 
            "svm_time": 41.62024402618408, 
            "slm_time": 8.339993000030518, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1016": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07637501507997513, 
            "svm_time": 41.39128804206848, 
            "slm_time": 6.8408849239349365, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "1017": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11429167538881302, 
            "svm_time": 42.17293095588684, 
            "slm_time": 7.490691900253296, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1018": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017916658893227577, 
            "svm_time": 41.555832862854004, 
            "slm_time": 8.764394998550415, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1019": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.2604583203792572, 
            "svm_time": 41.68454694747925, 
            "slm_time": 6.749980926513672, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1020": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01416665967553854, 
            "svm_time": 41.627769947052, 
            "slm_time": 6.94494104385376, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "1021": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1022": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "1023": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.12962499260902405, 
            "svm_time": 41.66344404220581, 
            "slm_time": 6.458293914794922, 
            "feat_shape": [
                800, 
                16, 
                10, 
                14
            ]
        }
    }, 
    "1024": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 119808 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 119808 exceeds limit 30000',)"
            }
        }
    }, 
    "1025": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.713762044906616, 
            "slm_time": 7.767844915390015, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1026": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.65983200073242, 
            "slm_time": 7.747223854064941, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1027": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.774637937545776, 
            "slm_time": 7.742478132247925, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1028": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1029": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.941879987716675, 
            "slm_time": 7.730890989303589, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1030": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.85644817352295, 
            "slm_time": 7.754024982452393, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1031": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "1032": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.95918893814087, 
            "slm_time": 7.72671914100647, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1033": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.014448165893555, 
            "slm_time": 8.088194847106934, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1034": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.979593992233276, 
            "slm_time": 7.761373996734619, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1035": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (9, 9), True))"
            }
        }
    }, 
    "1036": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.642277002334595, 
            "slm_time": 7.743682861328125, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1037": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.98450303077698, 
            "slm_time": 7.750530958175659, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1038": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.1257050037384, 
            "slm_time": 7.754164934158325, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1039": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1040": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.99871492385864, 
            "slm_time": 7.808730125427246, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1041": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.08034801483154, 
            "slm_time": 7.746679067611694, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1042": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.97317910194397, 
            "slm_time": 7.731504917144775, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1043": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 5, 7), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 5, 7), (7, 7), True))"
            }
        }
    }, 
    "1044": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.98969101905823, 
            "slm_time": 7.772222995758057, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1045": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.04312515258789, 
            "slm_time": 7.741157054901123, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1046": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.05753803253174, 
            "slm_time": 7.76371693611145, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1047": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.09730505943298, 
            "slm_time": 7.733867883682251, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1048": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.04699492454529, 
            "slm_time": 7.741098880767822, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1049": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 41.940600872039795, 
            "slm_time": 7.767796993255615, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1050": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.09386706352234, 
            "slm_time": 7.738861083984375, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1051": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.04506206512451, 
            "slm_time": 7.735934019088745, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1052": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.10672402381897, 
            "slm_time": 7.784071922302246, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1053": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.12520098686218, 
            "slm_time": 7.744091033935547, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1054": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.08250904083252, 
            "slm_time": 7.768037796020508, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1055": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.37102508544922, 
            "slm_time": 7.734089136123657, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1056": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.311474084854126, 
            "slm_time": 7.74587082862854, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1057": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017374994233250618, 
            "svm_time": 42.30903601646423, 
            "slm_time": 7.76726222038269, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1058": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.34667491912842, 
            "slm_time": 7.740041971206665, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1059": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015708325430750847, 
            "svm_time": 42.14458417892456, 
            "slm_time": 8.179489850997925, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1060": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.046083323657512665, 
            "svm_time": 42.234208822250366, 
            "slm_time": 6.521202087402344, 
            "feat_shape": [
                800, 
                64, 
                6, 
                8
            ]
        }
    }, 
    "1061": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.287057876586914, 
            "slm_time": 7.745325088500977, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1062": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.390074014663696, 
            "slm_time": 7.760764837265015, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1063": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1064": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01966666243970394, 
            "svm_time": 42.40390110015869, 
            "slm_time": 8.724378108978271, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1065": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06283334642648697, 
            "svm_time": 42.42349195480347, 
            "slm_time": 7.8614771366119385, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1066": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.058166664093732834, 
            "svm_time": 42.39127802848816, 
            "slm_time": 7.0026891231536865, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "1067": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09224998950958252, 
            "svm_time": 42.42955303192139, 
            "slm_time": 7.519223928451538, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1068": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.412189960479736, 
            "slm_time": 9.23302698135376, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1069": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1070": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11274998635053635, 
            "svm_time": 42.4839551448822, 
            "slm_time": 7.562768936157227, 
            "feat_shape": [
                800, 
                256, 
                2, 
                4
            ]
        }
    }, 
    "1071": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05354166403412819, 
            "svm_time": 42.877256870269775, 
            "slm_time": 8.158425092697144, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1072": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 182528 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 182528 exceeds limit 30000',)"
            }
        }
    }, 
    "1073": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04024999216198921, 
            "svm_time": 42.83909511566162, 
            "slm_time": 7.794058084487915, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1074": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015458326786756516, 
            "svm_time": 42.439297914505005, 
            "slm_time": 6.522600889205933, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "1075": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.47555994987488, 
            "slm_time": 7.747859001159668, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1076": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.029500002041459084, 
            "svm_time": 42.61998510360718, 
            "slm_time": 8.043853044509888, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1077": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14383335411548615, 
            "svm_time": 42.53097319602966, 
            "slm_time": 6.373522043228149, 
            "feat_shape": [
                800, 
                32, 
                5, 
                7
            ]
        }
    }, 
    "1078": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11383335292339325, 
            "svm_time": 42.54313898086548, 
            "slm_time": 8.129049062728882, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1079": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013958326540887356, 
            "svm_time": 42.555351972579956, 
            "slm_time": 8.016978025436401, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1080": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.037708330899477005, 
            "svm_time": 42.5316219329834, 
            "slm_time": 9.129909992218018, 
            "feat_shape": [
                800, 
                128, 
                4, 
                6
            ]
        }
    }, 
    "1081": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022208333015441895, 
            "svm_time": 43.12746000289917, 
            "slm_time": 8.128154993057251, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1082": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1083": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 226304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 226304 exceeds limit 30000',)"
            }
        }
    }, 
    "1084": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 196608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 196608 exceeds limit 30000',)"
            }
        }
    }, 
    "1085": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.15495839715003967, 
            "svm_time": 43.60835385322571, 
            "slm_time": 8.608747005462646, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "1086": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03479165956377983, 
            "svm_time": 42.868860960006714, 
            "slm_time": 6.8567421436309814, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1087": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07775000482797623, 
            "svm_time": 42.89238500595093, 
            "slm_time": 8.007287979125977, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1088": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015458326786756516, 
            "svm_time": 42.879886865615845, 
            "slm_time": 6.546220064163208, 
            "feat_shape": [
                800, 
                64, 
                5, 
                7
            ]
        }
    }, 
    "1089": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.95094680786133, 
            "slm_time": 7.74737286567688, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1090": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0599166601896286, 
            "svm_time": 43.11021184921265, 
            "slm_time": 8.13655710220337, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1091": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1092": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012333327904343605, 
            "svm_time": 42.93318510055542, 
            "slm_time": 7.685358047485352, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1093": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10562499612569809, 
            "svm_time": 43.102975845336914, 
            "slm_time": 7.155104160308838, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1094": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.037708330899477005, 
            "svm_time": 42.96166205406189, 
            "slm_time": 7.715296983718872, 
            "feat_shape": [
                800, 
                128, 
                4, 
                6
            ]
        }
    }, 
    "1095": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "1096": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 226304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 226304 exceeds limit 30000',)"
            }
        }
    }, 
    "1097": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.3647083640098572, 
            "svm_time": 43.03251600265503, 
            "slm_time": 5.458142042160034, 
            "feat_shape": [
                800, 
                16, 
                12, 
                16
            ]
        }
    }, 
    "1098": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03633333742618561, 
            "svm_time": 42.95615911483765, 
            "slm_time": 7.364721775054932, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1099": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07862500101327896, 
            "svm_time": 42.939640045166016, 
            "slm_time": 7.774916887283325, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1100": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07233334332704544, 
            "svm_time": 43.194310903549194, 
            "slm_time": 8.743021965026855, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1101": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.029291672632098198, 
            "svm_time": 42.96673798561096, 
            "slm_time": 7.28846001625061, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1102": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.15608333051204681, 
            "svm_time": 43.09148812294006, 
            "slm_time": 7.346508979797363, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1103": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1104": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.026374999433755875, 
            "svm_time": 42.905062198638916, 
            "slm_time": 9.081832885742188, 
            "feat_shape": [
                800, 
                256, 
                4, 
                6
            ]
        }
    }, 
    "1105": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017374994233250618, 
            "svm_time": 42.965461015701294, 
            "slm_time": 7.740847110748291, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1106": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0834166631102562, 
            "svm_time": 43.04091691970825, 
            "slm_time": 8.271641969680786, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1107": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 30240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 30240 exceeds limit 30000',)"
            }
        }
    }, 
    "1108": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 5, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 98304 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 98304 exceeds limit 30000',)"
            }
        }
    }, 
    "1109": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 32, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 3, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.035208337008953094, 
            "svm_time": 43.087767124176025, 
            "slm_time": 8.78525996208191, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "1110": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01208332646638155, 
            "svm_time": 43.254014015197754, 
            "slm_time": 12.220852136611938, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1111": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 7
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1112": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03591666370630264, 
            "svm_time": 43.34239101409912, 
            "slm_time": 10.548305988311768, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1113": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009999995119869709, 
            "svm_time": 43.22006011009216, 
            "slm_time": 13.108252048492432, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1114": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02370833419263363, 
            "svm_time": 43.47459006309509, 
            "slm_time": 12.872696876525879, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1115": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1116": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.016874993219971657, 
            "svm_time": 43.34374809265137, 
            "slm_time": 13.455044984817505, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1117": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.016749991104006767, 
            "svm_time": 43.26875400543213, 
            "slm_time": 14.221186876296997, 
            "feat_shape": [
                800, 
                64, 
                4, 
                6
            ]
        }
    }, 
    "1118": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009999995119869709, 
            "svm_time": 43.525099992752075, 
            "slm_time": 12.8491690158844, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1119": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 600000',)"
            }
        }
    }, 
    "1120": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02137499675154686, 
            "svm_time": 45.03681993484497, 
            "slm_time": 12.373801946640015, 
            "feat_shape": [
                800, 
                32, 
                24, 
                32
            ]
        }
    }, 
    "1121": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.028749994933605194, 
            "svm_time": 43.93352794647217, 
            "slm_time": 12.801412105560303, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1122": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009999995119869709, 
            "svm_time": 43.383983850479126, 
            "slm_time": 12.835941076278687, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1123": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017791660502552986, 
            "svm_time": 43.52175807952881, 
            "slm_time": 16.931535005569458, 
            "feat_shape": [
                800, 
                256, 
                3, 
                5
            ]
        }
    }, 
    "1124": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 4, 6), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 4, 6), (7, 7), True))"
            }
        }
    }, 
    "1125": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.016374992206692696, 
            "svm_time": 43.67683696746826, 
            "slm_time": 10.609031915664673, 
            "feat_shape": [
                800, 
                128, 
                5, 
                7
            ]
        }
    }, 
    "1126": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 4, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02370833419263363, 
            "svm_time": 43.54466390609741, 
            "slm_time": 13.29634404182434, 
            "feat_shape": [
                800, 
                256, 
                5, 
                7
            ]
        }
    }, 
    "1127": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.47095704078674, 
            "slm_time": 12.862813949584961, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1128": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.45405101776123, 
            "slm_time": 12.830885171890259, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1129": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.45366191864014, 
            "slm_time": 12.841307878494263, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1130": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.020541664212942123, 
            "svm_time": 43.61542296409607, 
            "slm_time": 15.663753032684326, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1131": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1132": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02283332869410515, 
            "svm_time": 43.45447897911072, 
            "slm_time": 14.53543996810913, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1133": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374995440244675, 
            "svm_time": 43.96311807632446, 
            "slm_time": 29.38642978668213, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1134": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05870833247900009, 
            "svm_time": 43.66501593589783, 
            "slm_time": 12.793787956237793, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1135": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1136": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02487499825656414, 
            "svm_time": 43.763455867767334, 
            "slm_time": 16.804777145385742, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1137": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1138": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02800000086426735, 
            "svm_time": 43.630472898483276, 
            "slm_time": 15.17753291130066, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1139": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1140": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.57918977737427, 
            "slm_time": 12.788969993591309, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1141": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.67160391807556, 
            "slm_time": 12.842035055160522, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1142": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.592177867889404, 
            "slm_time": 13.071062803268433, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1143": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1115712 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1115712 exceeds limit 600000',)"
            }
        }
    }, 
    "1144": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013958326540887356, 
            "svm_time": 43.674335956573486, 
            "slm_time": 14.154412984848022, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1145": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04224998503923416, 
            "svm_time": 43.56001806259155, 
            "slm_time": 15.98836088180542, 
            "feat_shape": [
                800, 
                64, 
                6, 
                8
            ]
        }
    }, 
    "1146": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09049999713897705, 
            "svm_time": 43.625165939331055, 
            "slm_time": 14.523195028305054, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1147": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.58550190925598, 
            "slm_time": 13.28049087524414, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1148": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1149": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "1150": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01787499524652958, 
            "svm_time": 43.68485713005066, 
            "slm_time": 13.671499967575073, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1151": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03791666775941849, 
            "svm_time": 43.621443033218384, 
            "slm_time": 12.489362955093384, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1152": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.62084984779358, 
            "slm_time": 14.04155683517456, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1153": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.67261004447937, 
            "slm_time": 12.846341848373413, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1154": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1155": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 43.8121120929718, 
            "slm_time": 12.727007865905762, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1156": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1115712 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1115712 exceeds limit 600000',)"
            }
        }
    }, 
    "1157": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012749994173645973, 
            "svm_time": 44.589606046676636, 
            "slm_time": 42.58777904510498, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1158": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1159": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02283332869410515, 
            "svm_time": 43.93479895591736, 
            "slm_time": 14.530488014221191, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1160": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1161": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1162": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1163": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04216666519641876, 
            "svm_time": 44.24893522262573, 
            "slm_time": 16.408376932144165, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1164": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374993577599525, 
            "svm_time": 44.084452867507935, 
            "slm_time": 13.30332088470459, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1165": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01708332449197769, 
            "svm_time": 44.10386300086975, 
            "slm_time": 12.29586386680603, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1166": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022374995052814484, 
            "svm_time": 44.15830206871033, 
            "slm_time": 11.143560886383057, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1167": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1168": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1169": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.019791660830378532, 
            "svm_time": 44.69792914390564, 
            "slm_time": 30.35899591445923, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1170": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1171": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 44.57737994194031, 
            "slm_time": 12.823410987854004, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1172": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.027291659265756607, 
            "svm_time": 44.383524894714355, 
            "slm_time": 14.939625978469849, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1173": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01058332808315754, 
            "svm_time": 44.332852840423584, 
            "slm_time": 12.88335919380188, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1174": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1175": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023541660979390144, 
            "svm_time": 44.43221116065979, 
            "slm_time": 12.933288812637329, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1176": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1177": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01708332449197769, 
            "svm_time": 44.27915382385254, 
            "slm_time": 12.276793003082275, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1178": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 44.29931592941284, 
            "slm_time": 16.405041933059692, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1179": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1180": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1181": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374995440244675, 
            "svm_time": 45.35269808769226, 
            "slm_time": 29.366933822631836, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1182": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1183": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (7, 7), True))"
            }
        }
    }, 
    "1184": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1185": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02283332869410515, 
            "svm_time": 44.50107502937317, 
            "slm_time": 14.513072967529297, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1186": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01058332808315754, 
            "svm_time": 44.278948068618774, 
            "slm_time": 12.969388008117676, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1187": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 44.228617906570435, 
            "slm_time": 12.858471155166626, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1188": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1189": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1190": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 44.33100509643555, 
            "slm_time": 16.386854887008667, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1191": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 44.436723947525024, 
            "slm_time": 12.870522022247314, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1192": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1150016 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1150016 exceeds limit 600000',)"
            }
        }
    }, 
    "1193": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374995440244675, 
            "svm_time": 45.270111083984375, 
            "slm_time": 29.396252155303955, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1194": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1195": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1196": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09133335947990417, 
            "svm_time": 44.72806000709534, 
            "slm_time": 12.189488887786865, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1197": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 44.50685000419617, 
            "slm_time": 12.849472045898438, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1198": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1199": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01058332808315754, 
            "svm_time": 44.46829009056091, 
            "slm_time": 12.836582899093628, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1200": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1201": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023541660979390144, 
            "svm_time": 44.615036964416504, 
            "slm_time": 12.89461088180542, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1202": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1203": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 44.61849403381348, 
            "slm_time": 12.864473104476929, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1204": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1205": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0442500002682209, 
            "svm_time": 45.56904196739197, 
            "slm_time": 30.413341999053955, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "1206": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 68672 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 68672 exceeds limit 30000',)"
            }
        }
    }, 
    "1207": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 44.67465901374817, 
            "slm_time": 12.828808069229126, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1208": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1209": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1210": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0650416687130928, 
            "svm_time": 44.80599093437195, 
            "slm_time": 13.451150894165039, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1211": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022583328187465668, 
            "svm_time": 44.547297954559326, 
            "slm_time": 12.888765096664429, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1212": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041660957038403, 
            "svm_time": 44.74848008155823, 
            "slm_time": 16.052474975585938, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1213": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1214": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 44.81164598464966, 
            "slm_time": 12.812750101089478, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1215": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023541660979390144, 
            "svm_time": 44.768731117248535, 
            "slm_time": 12.948555946350098, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1216": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1217": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 283200 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 283200 exceeds limit 30000',)"
            }
        }
    }, 
    "1218": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1219": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.016374992206692696, 
            "svm_time": 44.98351001739502, 
            "slm_time": 16.672894954681396, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1220": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01787499524652958, 
            "svm_time": 44.83716416358948, 
            "slm_time": 14.022848844528198, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1221": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374993577599525, 
            "svm_time": 44.72937798500061, 
            "slm_time": 13.331528186798096, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1222": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1223": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1224": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.01138782501221, 
            "slm_time": 12.816944122314453, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1225": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023916663601994514, 
            "svm_time": 44.97429609298706, 
            "slm_time": 14.597105026245117, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1226": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1227": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.179017782211304, 
            "slm_time": 12.820766925811768, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1228": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 30000',)"
            }
        }
    }, 
    "1229": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1230": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02008332870900631, 
            "svm_time": 46.231842041015625, 
            "slm_time": 31.77769184112549, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "1231": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1232": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1233": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.019749995321035385, 
            "svm_time": 45.10239887237549, 
            "slm_time": 16.763551950454712, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1234": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.1308798789978, 
            "slm_time": 13.528187036514282, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1235": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1236": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05870833247900009, 
            "svm_time": 45.34341502189636, 
            "slm_time": 12.859477043151855, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1237": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1238": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1239": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1240": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1241": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.28002190589905, 
            "slm_time": 12.986863136291504, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1242": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (7, 7), True))"
            }
        }
    }, 
    "1243": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.018458329141139984, 
            "svm_time": 45.85280704498291, 
            "slm_time": 20.48912215232849, 
            "feat_shape": [
                800, 
                128, 
                7, 
                9
            ]
        }
    }, 
    "1244": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.60690999031067, 
            "slm_time": 12.840166091918945, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1245": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1246": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1247": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 45.885695934295654, 
            "slm_time": 16.370913982391357, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1248": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01787499152123928, 
            "svm_time": 45.66731810569763, 
            "slm_time": 13.494770050048828, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1249": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05170832946896553, 
            "svm_time": 45.82502293586731, 
            "slm_time": 13.263658046722412, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1250": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1251": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1252": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1253": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.76759600639343, 
            "slm_time": 12.785496950149536, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1254": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374995440244675, 
            "svm_time": 46.3360641002655, 
            "slm_time": 29.366407871246338, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1255": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1256": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1257": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.014833326451480389, 
            "svm_time": 45.728238105773926, 
            "slm_time": 11.106641054153442, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1258": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023499993607401848, 
            "svm_time": 45.693849086761475, 
            "slm_time": 13.21420407295227, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1259": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.67152118682861, 
            "slm_time": 12.864750862121582, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1260": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1261": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1262": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 45.77555298805237, 
            "slm_time": 16.421881198883057, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1263": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05870833247900009, 
            "svm_time": 45.737953901290894, 
            "slm_time": 12.794782161712646, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1264": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 600000',)"
            }
        }
    }, 
    "1265": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.021458329632878304, 
            "svm_time": 45.73588514328003, 
            "slm_time": 14.173081874847412, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1266": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.040041666477918625, 
            "svm_time": 46.046152114868164, 
            "slm_time": 30.05293607711792, 
            "feat_shape": [
                800, 
                256, 
                2, 
                4
            ]
        }
    }, 
    "1267": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 45.770198822021484, 
            "slm_time": 12.854454040527344, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1268": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1269": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1270": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (7, 7), True))"
            }
        }
    }, 
    "1271": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013958326540887356, 
            "svm_time": 46.04958701133728, 
            "slm_time": 12.78863787651062, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1272": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1273": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.0057909488678, 
            "slm_time": 12.851890087127686, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1274": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.014833326451480389, 
            "svm_time": 46.008694887161255, 
            "slm_time": 11.155687093734741, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1275": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1276": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1277": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05574999004602432, 
            "svm_time": 46.01415705680847, 
            "slm_time": 19.53652596473694, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1278": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374995440244675, 
            "svm_time": 46.69230389595032, 
            "slm_time": 29.42668104171753, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1279": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374993577599525, 
            "svm_time": 46.086302042007446, 
            "slm_time": 13.229833841323853, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1280": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1281": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.039666663855314255, 
            "svm_time": 46.07638192176819, 
            "slm_time": 13.289221048355103, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1282": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1283": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1284": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.10211706161499, 
            "slm_time": 12.820383071899414, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1285": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1286": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1287": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01787499152123928, 
            "svm_time": 46.23557686805725, 
            "slm_time": 13.508939027786255, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1288": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1289": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1290": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08041666448116302, 
            "svm_time": 47.216148853302, 
            "slm_time": 30.304177045822144, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "1291": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 46.188963174819946, 
            "slm_time": 16.440562963485718, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1292": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1293": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.92924094200134, 
            "slm_time": 12.83805799484253, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1294": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 2.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1295": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023541660979390144, 
            "svm_time": 46.25038003921509, 
            "slm_time": 12.972925186157227, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1296": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1297": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.30224609375, 
            "slm_time": 12.813339948654175, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1298": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.415509939193726, 
            "slm_time": 12.850752115249634, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1299": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.310455083847046, 
            "slm_time": 12.822638988494873, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1300": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.23536705970764, 
            "slm_time": 12.819900035858154, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1301": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.181488037109375, 
            "slm_time": 12.829103946685791, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1302": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.29181790351868, 
            "slm_time": 12.83302116394043, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1303": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.288820028305054, 
            "slm_time": 12.853765964508057, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1304": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.39896202087402, 
            "slm_time": 12.846602201461792, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1305": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.39293718338013, 
            "slm_time": 12.846227884292603, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1306": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.41743993759155, 
            "slm_time": 12.827905893325806, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1307": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.492132902145386, 
            "slm_time": 12.816241025924683, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1308": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.39040517807007, 
            "slm_time": 12.829319953918457, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1309": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.53367495536804, 
            "slm_time": 12.84166407585144, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1310": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.5287971496582, 
            "slm_time": 12.835418939590454, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1311": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.58001399040222, 
            "slm_time": 12.807626008987427, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1312": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.60982084274292, 
            "slm_time": 13.60255479812622, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1313": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.50720000267029, 
            "slm_time": 13.174394130706787, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1314": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.52310609817505, 
            "slm_time": 12.8833909034729, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1315": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.63703012466431, 
            "slm_time": 12.852219104766846, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1316": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.66215801239014, 
            "slm_time": 13.205613851547241, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1317": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.58930206298828, 
            "slm_time": 12.841429948806763, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1318": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.52793502807617, 
            "slm_time": 12.971470832824707, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1319": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.57533311843872, 
            "slm_time": 12.835294961929321, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1320": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.546875953674316, 
            "slm_time": 12.833030939102173, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1321": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.57151913642883, 
            "slm_time": 12.819231033325195, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1322": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.66073203086853, 
            "slm_time": 12.852581024169922, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1323": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.67252516746521, 
            "slm_time": 12.830705881118774, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1324": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.62603998184204, 
            "slm_time": 12.845199823379517, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1325": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.85485792160034, 
            "slm_time": 12.830645084381104, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1326": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.70164489746094, 
            "slm_time": 12.833889961242676, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1327": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.681856870651245, 
            "slm_time": 12.841474771499634, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1328": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.74055194854736, 
            "slm_time": 12.859496116638184, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1329": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.7049880027771, 
            "slm_time": 12.824954986572266, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1330": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1331": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.6849582195282, 
            "slm_time": 12.84256100654602, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1332": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.763498067855835, 
            "slm_time": 12.831041097640991, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1333": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.75871706008911, 
            "slm_time": 12.819200992584229, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1334": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1335": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.76129913330078, 
            "slm_time": 12.840266942977905, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1336": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1337": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.76572799682617, 
            "slm_time": 12.823270082473755, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1338": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 46.80413198471069, 
            "slm_time": 12.830641984939575, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1339": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1340": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01104166079312563, 
            "svm_time": 47.05870699882507, 
            "slm_time": 15.010578155517578, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1341": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1342": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.014833326451480389, 
            "svm_time": 46.884495973587036, 
            "slm_time": 11.125970125198364, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1343": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05870833247900009, 
            "svm_time": 46.96740794181824, 
            "slm_time": 12.796489953994751, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1344": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.03110718727112, 
            "slm_time": 12.824512004852295, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1345": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1346": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 46.936583042144775, 
            "slm_time": 16.42055892944336, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1347": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.022242069244385, 
            "slm_time": 12.83163595199585, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1348": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374993577599525, 
            "svm_time": 47.027235984802246, 
            "slm_time": 13.226563215255737, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1349": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01058332808315754, 
            "svm_time": 47.057976961135864, 
            "slm_time": 12.85304880142212, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1350": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1351": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1352": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023541660979390144, 
            "svm_time": 47.284472942352295, 
            "slm_time": 12.854491949081421, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1353": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.282732009887695, 
            "slm_time": 12.84060788154602, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1354": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 2, 3), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 2, 3), (5, 5), True))"
            }
        }
    }, 
    "1355": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1356": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.021458329632878304, 
            "svm_time": 47.26060390472412, 
            "slm_time": 14.140738010406494, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1357": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.017124993726611137, 
            "svm_time": 47.39495277404785, 
            "slm_time": 19.555153131484985, 
            "feat_shape": [
                800, 
                128, 
                6, 
                8
            ]
        }
    }, 
    "1358": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1359": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.38507294654846, 
            "slm_time": 12.78450083732605, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1360": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.019624998793005943, 
            "svm_time": 47.38305306434631, 
            "slm_time": 12.66707706451416, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1361": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1362": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "1363": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01058332808315754, 
            "svm_time": 47.61448907852173, 
            "slm_time": 12.861579895019531, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1364": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03024999611079693, 
            "svm_time": 47.51898121833801, 
            "slm_time": 12.850441932678223, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1365": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1366": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02762499637901783, 
            "svm_time": 47.55388116836548, 
            "slm_time": 6.018694877624512, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1367": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1368": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 600000',)"
            }
        }
    }, 
    "1369": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1370": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14929169416427612, 
            "svm_time": 47.73937201499939, 
            "slm_time": 15.091963052749634, 
            "feat_shape": [
                800, 
                32, 
                7, 
                9
            ]
        }
    }, 
    "1371": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.56571984291077, 
            "slm_time": 12.814978122711182, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1372": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.58004403114319, 
            "slm_time": 12.798112869262695, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1373": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1374": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01708332449197769, 
            "svm_time": 47.71606707572937, 
            "slm_time": 12.250526905059814, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1375": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 47.720776081085205, 
            "slm_time": 16.84374213218689, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1376": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1377": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1378": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "1379": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.022249996662139893, 
            "svm_time": 47.7020218372345, 
            "slm_time": 13.391207218170166, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1380": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023541660979390144, 
            "svm_time": 47.74809193611145, 
            "slm_time": 12.923495769500732, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1381": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1382": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03162499517202377, 
            "svm_time": 47.59278202056885, 
            "slm_time": 15.819270133972168, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1383": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02033332549035549, 
            "svm_time": 47.657994985580444, 
            "slm_time": 14.668681144714355, 
            "feat_shape": [
                800, 
                64, 
                6, 
                8
            ]
        }
    }, 
    "1384": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (5, 5), True))"
            }
        }
    }, 
    "1385": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05870833247900009, 
            "svm_time": 47.830463886260986, 
            "slm_time": 12.7882981300354, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1386": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1387": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.785841941833496, 
            "slm_time": 12.801321983337402, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1388": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1389": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.00749611854553, 
            "slm_time": 12.82598090171814, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1390": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1391": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1392": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.90250110626221, 
            "slm_time": 12.8106369972229, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1393": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "1394": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023541660979390144, 
            "svm_time": 47.92034101486206, 
            "slm_time": 13.19190502166748, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1395": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0442500002682209, 
            "svm_time": 49.035966873168945, 
            "slm_time": 30.37297821044922, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "1396": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1098752 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1098752 exceeds limit 600000',)"
            }
        }
    }, 
    "1397": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.83167290687561, 
            "slm_time": 12.823057174682617, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1398": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05870833247900009, 
            "svm_time": 48.03462791442871, 
            "slm_time": 12.948462963104248, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1399": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 2, 3), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 2, 3), (5, 5), True))"
            }
        }
    }, 
    "1400": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01787499524652958, 
            "svm_time": 47.914175033569336, 
            "slm_time": 13.214931011199951, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1401": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 47.92924904823303, 
            "slm_time": 12.819183826446533, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1402": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.021874994039535522, 
            "svm_time": 47.89103603363037, 
            "slm_time": 6.016278982162476, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1403": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1404": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1405": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01058332808315754, 
            "svm_time": 48.01933693885803, 
            "slm_time": 12.84952712059021, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1406": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 48.13805103302002, 
            "slm_time": 16.433121919631958, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1407": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1408": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1409": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1410": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.033291663974523544, 
            "svm_time": 49.10597586631775, 
            "slm_time": 30.384866952896118, 
            "feat_shape": [
                800, 
                256, 
                7, 
                9
            ]
        }
    }, 
    "1411": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374993577599525, 
            "svm_time": 48.140799045562744, 
            "slm_time": 13.230195999145508, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1412": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08829165250062943, 
            "svm_time": 48.21580696105957, 
            "slm_time": 13.159719944000244, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1413": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.20835494995117, 
            "slm_time": 12.827522993087769, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1414": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1415": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (5, 5), True))"
            }
        }
    }, 
    "1416": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01708332449197769, 
            "svm_time": 48.372780084609985, 
            "slm_time": 12.26050591468811, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1417": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1418": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.45293092727661, 
            "slm_time": 12.791264057159424, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1419": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1420": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.38077402114868, 
            "slm_time": 12.822854995727539, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1421": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.058083318173885345, 
            "svm_time": 49.253134965896606, 
            "slm_time": 116.55062890052795, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1422": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1423": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "1424": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02283332869410515, 
            "svm_time": 48.57882618904114, 
            "slm_time": 14.506325006484985, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1425": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1426": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1427": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.49350309371948, 
            "slm_time": 12.770809888839722, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1428": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.43373394012451, 
            "slm_time": 12.849124908447266, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1429": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02762499637901783, 
            "svm_time": 48.60415005683899, 
            "slm_time": 6.026571035385132, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1430": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (5, 5), True))"
            }
        }
    }, 
    "1431": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.67901110649109, 
            "slm_time": 12.840008974075317, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1432": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1433": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.687609910964966, 
            "slm_time": 12.801164865493774, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1434": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2265600 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2265600 exceeds limit 600000',)"
            }
        }
    }, 
    "1435": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.026166658848524094, 
            "svm_time": 48.775327920913696, 
            "slm_time": 12.846598863601685, 
            "feat_shape": [
                800, 
                32, 
                6, 
                8
            ]
        }
    }, 
    "1436": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03024999611079693, 
            "svm_time": 48.765987157821655, 
            "slm_time": 12.859789848327637, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1437": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1438": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04908333346247673, 
            "svm_time": 48.610984086990356, 
            "slm_time": 18.534740924835205, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1439": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374993577599525, 
            "svm_time": 48.75923991203308, 
            "slm_time": 13.24926209449768, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1440": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 128, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 128, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1441": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05870833247900009, 
            "svm_time": 48.78472399711609, 
            "slm_time": 12.786932945251465, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1442": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1443": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.776535987854004, 
            "slm_time": 12.794272899627686, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1444": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.044083330780267715, 
            "svm_time": 48.9546000957489, 
            "slm_time": 11.936065912246704, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1445": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 2, 3), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 2, 3), (5, 5), True))"
            }
        }
    }, 
    "1446": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 48.883904218673706, 
            "slm_time": 12.81319284439087, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1447": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2300032 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2300032 exceeds limit 600000',)"
            }
        }
    }, 
    "1448": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.027791660279035568, 
            "svm_time": 48.86020803451538, 
            "slm_time": 14.765919208526611, 
            "feat_shape": [
                800, 
                64, 
                6, 
                8
            ]
        }
    }, 
    "1449": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 68672 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 68672 exceeds limit 30000',)"
            }
        }
    }, 
    "1450": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01787499152123928, 
            "svm_time": 48.91556191444397, 
            "slm_time": 13.484166145324707, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1451": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1452": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1453": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 49.70121693611145, 
            "slm_time": 16.367207050323486, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1454": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (9, 9), True))"
            }
        }
    }, 
    "1455": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13904167711734772, 
            "svm_time": 49.43842792510986, 
            "slm_time": 5.899848937988281, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1456": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1457": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 49.18284797668457, 
            "slm_time": 12.797845125198364, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1458": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01708332449197769, 
            "svm_time": 48.975051164627075, 
            "slm_time": 12.284060001373291, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1459": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1460": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2197504 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2197504 exceeds limit 600000',)"
            }
        }
    }, 
    "1461": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 4, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 274688 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 274688 exceeds limit 30000',)"
            }
        }
    }, 
    "1462": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1463": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01787499152123928, 
            "svm_time": 49.24970602989197, 
            "slm_time": 13.41741681098938, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1464": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02837499789893627, 
            "svm_time": 49.137635946273804, 
            "slm_time": 11.734925985336304, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1465": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08550001680850983, 
            "svm_time": 49.30011200904846, 
            "slm_time": 12.930025100708008, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1466": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 64, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 64, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1467": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.056999996304512024, 
            "svm_time": 49.432162046432495, 
            "slm_time": 14.151023149490356, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1468": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.012041661888360977, 
            "svm_time": 49.22526216506958, 
            "slm_time": 16.40626096725464, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1469": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1470": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 32, 2, 3), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 32, 2, 3), (9, 9), True))"
            }
        }
    }, 
    "1471": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.051666662096977234, 
            "svm_time": 49.453030824661255, 
            "slm_time": 12.470007181167603, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1472": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.014541661366820335, 
            "svm_time": 49.29695510864258, 
            "slm_time": 10.495754957199097, 
            "feat_shape": [
                800, 
                128, 
                3, 
                4
            ]
        }
    }, 
    "1473": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 2, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 10.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2265600 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2265600 exceeds limit 30000',)"
            }
        }
    }, 
    "1474": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.035749997943639755, 
            "svm_time": 49.570976972579956, 
            "slm_time": 12.737720966339111, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1475": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.013374995440244675, 
            "svm_time": 50.176958084106445, 
            "slm_time": 29.40750288963318, 
            "feat_shape": [
                800, 
                256, 
                6, 
                8
            ]
        }
    }, 
    "1476": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 3, 4), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 3, 4), (5, 5), True))"
            }
        }
    }, 
    "1477": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01104166079312563, 
            "svm_time": 49.53203892707825, 
            "slm_time": 15.035632133483887, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1478": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03320833295583725, 
            "svm_time": 49.53412914276123, 
            "slm_time": 12.670873880386353, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1479": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10541663318872452, 
            "svm_time": 49.437159061431885, 
            "slm_time": 12.964322090148926, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1480": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02283332869410515, 
            "svm_time": 49.50828790664673, 
            "slm_time": 14.652119159698486, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1481": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 3, 4), (7, 7), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 3, 4), (7, 7), True))"
            }
        }
    }, 
    "1482": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.040833327919244766, 
            "svm_time": 49.781615018844604, 
            "slm_time": 9.805185079574585, 
            "feat_shape": [
                800, 
                64, 
                10, 
                14
            ]
        }
    }, 
    "1483": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08679167181253433, 
            "svm_time": 49.95648789405823, 
            "slm_time": 6.904566049575806, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1484": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1378333419561386, 
            "svm_time": 49.82381892204285, 
            "slm_time": 11.92106008529663, 
            "feat_shape": [
                800, 
                256, 
                2, 
                3
            ]
        }
    }, 
    "1485": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1486": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2300032 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2300032 exceeds limit 600000',)"
            }
        }
    }, 
    "1487": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1488": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 49.93407607078552, 
            "slm_time": 12.779457807540894, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1489": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05329166352748871, 
            "svm_time": 49.9055118560791, 
            "slm_time": 19.228636980056763, 
            "feat_shape": [
                800, 
                128, 
                6, 
                8
            ]
        }
    }, 
    "1490": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009916662238538265, 
            "svm_time": 49.976516008377075, 
            "slm_time": 12.812232971191406, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1491": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.046583328396081924, 
            "svm_time": 49.655142068862915, 
            "slm_time": 13.1460599899292, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1492": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 16, 1, 2), (5, 5), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 16, 1, 2), (5, 5), True))"
            }
        }
    }, 
    "1493": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.049124982208013535, 
            "svm_time": 49.87381196022034, 
            "slm_time": 12.367357015609741, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1494": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 8, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14158335328102112, 
            "svm_time": 49.99787092208862, 
            "slm_time": 5.702417850494385, 
            "feat_shape": [
                800, 
                256, 
                3, 
                4
            ]
        }
    }, 
    "1495": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009291662834584713, 
            "svm_time": 51.61057806015015, 
            "slm_time": 12.913663864135742, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1496": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.047749996185302734, 
            "svm_time": 50.03280019760132, 
            "slm_time": 15.52656078338623, 
            "feat_shape": [
                800, 
                256, 
                3, 
                7
            ]
        }
    }, 
    "1497": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 56576 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 56576 exceeds limit 30000',)"
            }
        }
    }, 
    "1498": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 68672 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 68672 exceeds limit 30000',)"
            }
        }
    }, 
    "1499": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2197504 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2197504 exceeds limit 600000',)"
            }
        }
    }, 
    "1500": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1501": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 108800 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 108800 exceeds limit 30000',)"
            }
        }
    }, 
    "1502": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02112499624490738, 
            "svm_time": 50.19097089767456, 
            "slm_time": 10.01547908782959, 
            "feat_shape": [
                800, 
                32, 
                8, 
                12
            ]
        }
    }, 
    "1503": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009291662834584713, 
            "svm_time": 51.88709497451782, 
            "slm_time": 12.909902811050415, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1504": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03762499615550041, 
            "svm_time": 51.929641008377075, 
            "slm_time": 12.818773984909058, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1505": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02004166506230831, 
            "svm_time": 51.03455114364624, 
            "slm_time": 11.633465051651001, 
            "feat_shape": [
                800, 
                128, 
                9, 
                13
            ]
        }
    }, 
    "1506": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0430000014603138, 
            "svm_time": 52.04447388648987, 
            "slm_time": 13.52031397819519, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1507": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11129166185855865, 
            "svm_time": 50.50899910926819, 
            "slm_time": 7.006276845932007, 
            "feat_shape": [
                800, 
                256, 
                5, 
                9
            ]
        }
    }, 
    "1508": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1509": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1510": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1511": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009291662834584713, 
            "svm_time": 52.0842080116272, 
            "slm_time": 12.885600090026855, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1512": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1202432 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1202432 exceeds limit 600000',)"
            }
        }
    }, 
    "1513": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 49152 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 49152 exceeds limit 30000',)"
            }
        }
    }, 
    "1514": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 131328 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 131328 exceeds limit 30000',)"
            }
        }
    }, 
    "1515": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01604165881872177, 
            "svm_time": 50.478578090667725, 
            "slm_time": 10.078958988189697, 
            "feat_shape": [
                800, 
                64, 
                10, 
                14
            ]
        }
    }, 
    "1516": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 8, 12), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 8, 12), (9, 9), True))"
            }
        }
    }, 
    "1517": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1518": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.024666661396622658, 
            "svm_time": 51.26376295089722, 
            "slm_time": 9.934233903884888, 
            "feat_shape": [
                800, 
                32, 
                9, 
                13
            ]
        }
    }, 
    "1519": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05141665041446686, 
            "svm_time": 51.60237383842468, 
            "slm_time": 13.753774881362915, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1520": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03020833060145378, 
            "svm_time": 52.21849799156189, 
            "slm_time": 6.2097718715667725, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1521": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.04487500339746475, 
            "svm_time": 51.075639963150024, 
            "slm_time": 11.18883490562439, 
            "feat_shape": [
                800, 
                128, 
                9, 
                13
            ]
        }
    }, 
    "1522": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 77376 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 77376 exceeds limit 30000',)"
            }
        }
    }, 
    "1523": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.049666665494441986, 
            "svm_time": 50.98264193534851, 
            "slm_time": 14.417781114578247, 
            "feat_shape": [
                800, 
                256, 
                5, 
                9
            ]
        }
    }, 
    "1524": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1525": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1167360 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1167360 exceeds limit 600000',)"
            }
        }
    }, 
    "1526": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01749999262392521, 
            "svm_time": 52.2295880317688, 
            "slm_time": 24.67245101928711, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1527": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 196608 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 196608 exceeds limit 30000',)"
            }
        }
    }, 
    "1528": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1529": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 9, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05316666513681412, 
            "svm_time": 50.61649203300476, 
            "slm_time": 17.284374952316284, 
            "feat_shape": [
                800, 
                256, 
                2, 
                6
            ]
        }
    }, 
    "1530": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 3, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1531": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 52.17039895057678, 
            "slm_time": 13.351378917694092, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1532": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 8, 12), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 8, 12), (9, 9), True))"
            }
        }
    }, 
    "1533": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.010749995708465576, 
            "svm_time": 50.58330702781677, 
            "slm_time": 10.522552967071533, 
            "feat_shape": [
                800, 
                64, 
                8, 
                12
            ]
        }
    }, 
    "1534": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1535": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.14641663432121277, 
            "svm_time": 50.69899106025696, 
            "slm_time": 5.378066062927246, 
            "feat_shape": [
                800, 
                32, 
                8, 
                12
            ]
        }
    }, 
    "1536": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1196666732430458, 
            "svm_time": 51.96036100387573, 
            "slm_time": 14.289525032043457, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1537": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 7, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10300001502037048, 
            "svm_time": 52.17000603675842, 
            "slm_time": 15.881120920181274, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1538": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1167360 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1167360 exceeds limit 600000',)"
            }
        }
    }, 
    "1539": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.030166665092110634, 
            "svm_time": 51.715497970581055, 
            "slm_time": 23.390127182006836, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1540": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10895834118127823, 
            "svm_time": 50.902710914611816, 
            "slm_time": 13.052578926086426, 
            "feat_shape": [
                800, 
                128, 
                6, 
                10
            ]
        }
    }, 
    "1541": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0469166599214077, 
            "svm_time": 51.304332971572876, 
            "slm_time": 11.316501140594482, 
            "feat_shape": [
                800, 
                16, 
                23, 
                31
            ]
        }
    }, 
    "1542": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 42240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 42240 exceeds limit 30000',)"
            }
        }
    }, 
    "1543": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0364583358168602, 
            "svm_time": 52.730818033218384, 
            "slm_time": 15.456315040588379, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1544": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.056208331137895584, 
            "svm_time": 50.822285890579224, 
            "slm_time": 13.505222082138062, 
            "feat_shape": [
                800, 
                256, 
                1, 
                5
            ]
        }
    }, 
    "1545": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.050916656851768494, 
            "svm_time": 52.696682929992676, 
            "slm_time": 15.34859299659729, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1546": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1771249920129776, 
            "svm_time": 52.00758385658264, 
            "slm_time": 4.883074045181274, 
            "feat_shape": [
                800, 
                16, 
                28, 
                36
            ]
        }
    }, 
    "1547": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 52.472667932510376, 
            "slm_time": 13.34866213798523, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1548": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015999993309378624, 
            "svm_time": 52.497761964797974, 
            "slm_time": 14.003038883209229, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1549": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.014541658572852612, 
            "svm_time": 51.03812789916992, 
            "slm_time": 10.601999044418335, 
            "feat_shape": [
                800, 
                64, 
                8, 
                12
            ]
        }
    }, 
    "1550": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13699999451637268, 
            "svm_time": 52.754071950912476, 
            "slm_time": 13.52889895439148, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1551": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1552": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0781250074505806, 
            "svm_time": 50.97342300415039, 
            "slm_time": 17.40344214439392, 
            "feat_shape": [
                800, 
                32, 
                10, 
                14
            ]
        }
    }, 
    "1553": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 155904 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 155904 exceeds limit 30000',)"
            }
        }
    }, 
    "1554": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01941666379570961, 
            "svm_time": 51.44538187980652, 
            "slm_time": 12.732683897018433, 
            "feat_shape": [
                800, 
                256, 
                5, 
                9
            ]
        }
    }, 
    "1555": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07787501811981201, 
            "svm_time": 52.381468057632446, 
            "slm_time": 12.280236005783081, 
            "feat_shape": [
                800, 
                128, 
                11, 
                15
            ]
        }
    }, 
    "1556": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 52.52398490905762, 
            "slm_time": 13.88976001739502, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1557": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03466666862368584, 
            "svm_time": 52.644206047058105, 
            "slm_time": 16.392409086227417, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1558": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.08270834386348724, 
            "svm_time": 51.361685037612915, 
            "slm_time": 9.348099946975708, 
            "feat_shape": [
                800, 
                16, 
                9, 
                13
            ]
        }
    }, 
    "1559": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1560": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.11229164898395538, 
            "svm_time": 52.42942404747009, 
            "slm_time": 5.807714939117432, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1561": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 52.66622591018677, 
            "slm_time": 13.831290006637573, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1562": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10529165714979172, 
            "svm_time": 51.36529517173767, 
            "slm_time": 14.14960503578186, 
            "feat_shape": [
                800, 
                256, 
                3, 
                7
            ]
        }
    }, 
    "1563": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015333326533436775, 
            "svm_time": 52.74476718902588, 
            "slm_time": 14.041591882705688, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1564": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023458333685994148, 
            "svm_time": 52.932368993759155, 
            "slm_time": 14.2903311252594, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1565": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2197504 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2197504 exceeds limit 600000',)"
            }
        }
    }, 
    "1566": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 8, 12), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 8, 12), (9, 9), True))"
            }
        }
    }, 
    "1567": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 211200 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 211200 exceeds limit 30000',)"
            }
        }
    }, 
    "1568": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.03666666895151138, 
            "svm_time": 51.17905402183533, 
            "slm_time": 10.392099142074585, 
            "feat_shape": [
                800, 
                32, 
                6, 
                10
            ]
        }
    }, 
    "1569": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.01941666379570961, 
            "svm_time": 51.909910917282104, 
            "slm_time": 12.122409105300903, 
            "feat_shape": [
                800, 
                256, 
                5, 
                9
            ]
        }
    }, 
    "1570": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 42240 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 42240 exceeds limit 30000',)"
            }
        }
    }, 
    "1571": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 68672 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 68672 exceeds limit 30000',)"
            }
        }
    }, 
    "1572": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 52.78312587738037, 
            "slm_time": 13.336843967437744, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1573": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.044374994933605194, 
            "svm_time": 52.293006896972656, 
            "slm_time": 12.166152954101562, 
            "feat_shape": [
                800, 
                128, 
                9, 
                13
            ]
        }
    }, 
    "1574": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09537501633167267, 
            "svm_time": 52.663553953170776, 
            "slm_time": 7.256618022918701, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1575": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.17966662347316742, 
            "svm_time": 52.638749837875366, 
            "slm_time": 10.422668218612671, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1576": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07862500101327896, 
            "svm_time": 51.31448292732239, 
            "slm_time": 9.78307819366455, 
            "feat_shape": [
                800, 
                16, 
                8, 
                12
            ]
        }
    }, 
    "1577": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015333326533436775, 
            "svm_time": 52.8030788898468, 
            "slm_time": 14.068753004074097, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1578": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2334720 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2334720 exceeds limit 600000',)"
            }
        }
    }, 
    "1579": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02812499739229679, 
            "svm_time": 52.76324105262756, 
            "slm_time": 14.642176866531372, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1580": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 182528 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 182528 exceeds limit 30000',)"
            }
        }
    }, 
    "1581": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0573749877512455, 
            "svm_time": 51.4016809463501, 
            "slm_time": 15.673928022384644, 
            "feat_shape": [
                800, 
                256, 
                2, 
                6
            ]
        }
    }, 
    "1582": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 343, in objective\n    rdict = call_catching_pipeline_errors(exception_thrower)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 322, in exception_thrower\n    assert feat_set.shape[1] >= min_features, 'min_features not satisfied'\nAssertionError: min_features not satisfied\n", 
                "type": "<type 'exceptions.AssertionError'>", 
                "exc": "AssertionError('min_features not satisfied',)"
            }
        }
    }, 
    "1583": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1584": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.019333327189087868, 
            "svm_time": 52.52640700340271, 
            "slm_time": 12.610417127609253, 
            "feat_shape": [
                800, 
                256, 
                6, 
                10
            ]
        }
    }, 
    "1585": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02112499624490738, 
            "svm_time": 51.47764587402344, 
            "slm_time": 10.054912090301514, 
            "feat_shape": [
                800, 
                32, 
                8, 
                12
            ]
        }
    }, 
    "1586": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0742916613817215, 
            "svm_time": 53.29656410217285, 
            "slm_time": 15.542436122894287, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1587": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.08228516578674, 
            "slm_time": 13.362047910690308, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1588": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1589": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.030791662633419037, 
            "svm_time": 52.88804793357849, 
            "slm_time": 11.429606914520264, 
            "feat_shape": [
                800, 
                128, 
                11, 
                15
            ]
        }
    }, 
    "1590": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09304165840148926, 
            "svm_time": 52.672755002975464, 
            "slm_time": 12.606897115707397, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1591": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 2300032 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 2300032 exceeds limit 600000',)"
            }
        }
    }, 
    "1592": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09387500584125519, 
            "svm_time": 51.59779715538025, 
            "slm_time": 11.180487871170044, 
            "feat_shape": [
                800, 
                16, 
                8, 
                12
            ]
        }
    }, 
    "1593": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.04463005065918, 
            "slm_time": 13.35719895362854, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1594": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 182528 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 182528 exceeds limit 30000',)"
            }
        }
    }, 
    "1595": {
        "hps": {
            "_depth": 0, 
            "l1_1@pool_stride": 8, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l1_1@pool_order": 1.0, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 64512 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 64512 exceeds limit 30000',)"
            }
        }
    }, 
    "1596": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 2.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.014291660860180855, 
            "svm_time": 53.072962045669556, 
            "slm_time": 13.68602705001831, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1597": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05295832082629204, 
            "svm_time": 51.59560990333557, 
            "slm_time": 13.919503927230835, 
            "feat_shape": [
                800, 
                256, 
                2, 
                6
            ]
        }
    }, 
    "1598": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0391249917447567, 
            "svm_time": 53.3933629989624, 
            "slm_time": 15.34257698059082, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1599": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05554166063666344, 
            "svm_time": 51.620792865753174, 
            "slm_time": 5.290096044540405, 
            "feat_shape": [
                800, 
                64, 
                6, 
                10
            ]
        }
    }, 
    "1600": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 8, 12), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 8, 12), (9, 9), True))"
            }
        }
    }, 
    "1601": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.20519208908081, 
            "slm_time": 13.351696014404297, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1602": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.204434871673584, 
            "slm_time": 13.345998048782349, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1603": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.32776713371277, 
            "slm_time": 13.336464881896973, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1604": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.29680919647217, 
            "slm_time": 13.382458925247192, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1605": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.35589909553528, 
            "slm_time": 13.362106084823608, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1606": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.44370698928833, 
            "slm_time": 13.368621826171875, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1607": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.42390584945679, 
            "slm_time": 13.338674068450928, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1608": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.46673107147217, 
            "slm_time": 13.353545904159546, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1609": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.48406982421875, 
            "slm_time": 13.358177900314331, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1610": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.67647981643677, 
            "slm_time": 13.349362850189209, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1611": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.446130990982056, 
            "slm_time": 13.360912084579468, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1612": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.45123815536499, 
            "slm_time": 13.355528831481934, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1613": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.48645496368408, 
            "slm_time": 13.323140859603882, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1614": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.560795068740845, 
            "slm_time": 13.33583402633667, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1615": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.55115509033203, 
            "slm_time": 13.348412990570068, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1616": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.583338022232056, 
            "slm_time": 13.833606004714966, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1617": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.514155864715576, 
            "slm_time": 13.443945169448853, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1618": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.60822105407715, 
            "slm_time": 13.399800777435303, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1619": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.705157995224, 
            "slm_time": 13.711573123931885, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1620": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.5221049785614, 
            "slm_time": 13.356743097305298, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1621": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.6333589553833, 
            "slm_time": 13.355256080627441, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1622": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.72224283218384, 
            "slm_time": 13.335780143737793, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1623": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.627460956573486, 
            "slm_time": 13.327913999557495, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1624": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.72419309616089, 
            "slm_time": 13.335028886795044, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1625": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.82395911216736, 
            "slm_time": 13.32844591140747, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1626": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.70473599433899, 
            "slm_time": 13.315311908721924, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1627": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.77925705909729, 
            "slm_time": 13.333117008209229, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1628": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.723050117492676, 
            "slm_time": 13.352407932281494, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1629": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.787672996520996, 
            "slm_time": 13.3074369430542, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1630": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.824462890625, 
            "slm_time": 13.33761715888977, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1631": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.80040001869202, 
            "slm_time": 13.342064142227173, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1632": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.911930084228516, 
            "slm_time": 13.350497961044312, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1633": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.857662200927734, 
            "slm_time": 13.33397388458252, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1634": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.94749212265015, 
            "slm_time": 13.345801830291748, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1635": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.05066895484924, 
            "slm_time": 13.351319074630737, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1636": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.047910928726196, 
            "slm_time": 13.345193862915039, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1637": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.050916656851768494, 
            "svm_time": 54.33876895904541, 
            "slm_time": 15.365673065185547, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1638": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 53.98390603065491, 
            "slm_time": 13.339667081832886, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1639": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.011738777160645, 
            "slm_time": 13.334873914718628, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1640": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.109755992889404, 
            "slm_time": 13.325469017028809, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1641": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.060666657984256744, 
            "svm_time": 53.83861494064331, 
            "slm_time": 10.804088115692139, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1642": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.009374996647238731, 
            "svm_time": 53.72255897521973, 
            "slm_time": 23.67433786392212, 
            "feat_shape": [
                800, 
                256, 
                6, 
                10
            ]
        }
    }, 
    "1643": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.07804165035486221, 
            "svm_time": 54.68759894371033, 
            "slm_time": 13.604632139205933, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1644": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0391249917447567, 
            "svm_time": 54.537024974823, 
            "slm_time": 15.330082178115845, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1645": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.233208894729614, 
            "slm_time": 13.328651189804077, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1646": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.39456510543823, 
            "slm_time": 13.334470987319946, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1647": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.02112499624490738, 
            "svm_time": 52.98627805709839, 
            "slm_time": 9.985973834991455, 
            "feat_shape": [
                800, 
                32, 
                8, 
                12
            ]
        }
    }, 
    "1648": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.05045831948518753, 
            "svm_time": 53.36744809150696, 
            "slm_time": 14.160353899002075, 
            "feat_shape": [
                800, 
                256, 
                4, 
                8
            ]
        }
    }, 
    "1649": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.90562915802002, 
            "slm_time": 13.341798067092896, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1650": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.10629164427518845, 
            "svm_time": 53.91438698768616, 
            "slm_time": 5.431756019592285, 
            "feat_shape": [
                800, 
                128, 
                9, 
                13
            ]
        }
    }, 
    "1651": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1652": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13354165852069855, 
            "svm_time": 53.390531063079834, 
            "slm_time": 12.789514064788818, 
            "feat_shape": [
                800, 
                256, 
                2, 
                6
            ]
        }
    }, 
    "1653": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.1264166533946991, 
            "svm_time": 53.43672800064087, 
            "slm_time": 9.446554183959961, 
            "feat_shape": [
                800, 
                16, 
                9, 
                13
            ]
        }
    }, 
    "1654": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06487500667572021, 
            "svm_time": 55.088083028793335, 
            "slm_time": 13.580635070800781, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1655": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 9, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 892, in pyll_theano_batched_lmap\n    s_obatch, oshp = pyll.rec_eval(thing)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 924, in rec_eval\n    memo_gc=memo_gc)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 358, in slm_lnorm\n    channels=True)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 235, in boxconv\n    raise InvalidDescription('boxconv', (x_shp, kershp, channels))\nInvalidDescription: ('boxconv', ((2, 256, 8, 12), (9, 9), True))\n", 
                "type": "<class 'hpconvnet.pyll_slm.InvalidDescription'>", 
                "exc": "InvalidDescription('boxconv', ((2, 256, 8, 12), (9, 9), True))"
            }
        }
    }, 
    "1656": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0110833290964365, 
            "svm_time": 54.74211502075195, 
            "slm_time": 22.746355056762695, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1657": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 5
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.023458333685994148, 
            "svm_time": 55.05300307273865, 
            "slm_time": 14.259315013885498, 
            "feat_shape": [
                800, 
                256, 
                9, 
                13
            ]
        }
    }, 
    "1658": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 2.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 3, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.026249999180436134, 
            "svm_time": 54.68384790420532, 
            "slm_time": 16.092138051986694, 
            "feat_shape": [
                800, 
                256, 
                7, 
                11
            ]
        }
    }, 
    "1659": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 64, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 7, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 3, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 0, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09554167091846466, 
            "svm_time": 53.46164083480835, 
            "slm_time": 9.197742938995361, 
            "feat_shape": [
                800, 
                64, 
                7, 
                11
            ]
        }
    }, 
    "1660": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 10.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.026541659608483315, 
            "svm_time": 54.923858880996704, 
            "slm_time": 13.372856855392456, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1661": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.93238306045532, 
            "slm_time": 13.794858932495117, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1662": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 32, 
            "l2_1_pool@rf_size": 7, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.0247499980032444, 
            "svm_time": 53.564937114715576, 
            "slm_time": 10.027347087860107, 
            "feat_shape": [
                800, 
                32, 
                9, 
                13
            ]
        }
    }, 
    "1663": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 7, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.015999993309378624, 
            "svm_time": 55.06973385810852, 
            "slm_time": 14.022747993469238, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1664": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 5, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 16, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 9, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 312, in exception_thrower\n    feat_set = rec_eval(X, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 35840 exceeds limit 30000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 35840 exceeds limit 30000',)"
            }
        }
    }, 
    "1665": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.00866666343063116, 
            "svm_time": 54.97935199737549, 
            "slm_time": 13.797567129135132, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1666": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 128, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 0, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 9, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 5, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 7, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.09454165399074554, 
            "svm_time": 53.63304305076599, 
            "slm_time": 16.96296000480652, 
            "feat_shape": [
                800, 
                128, 
                5, 
                9
            ]
        }
    }, 
    "1667": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 2, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 10.0, 
            "l2_2_norm@rfn_size": 7, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "fail", 
            "loss": 1.0, 
            "failure": {
                "tb": "Traceback (most recent call last):\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/slm.py\", line 465, in call_catching_pipeline_errors\n    return fn()\n  File \"./simple-hp/simple-hp-modif-generic.py\", line 283, in exception_thrower\n    argdict = rec_eval(expr, memo=memo, print_node_on_error=False)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt/hyperopt/pyll/base.py\", line 905, in rec_eval\n    rval = scope._impls[node.name](*args, **kwargs)\n  File \"/home/menotti/dev/hp-pkgs/hyperopt-convnet/hpconvnet/pyll_slm.py\", line 899, in pyll_theano_batched_lmap\n    rowlen, abort_on_rows_larger_than))\nValueError: rowlen 1132800 exceeds limit 600000\n", 
                "type": "<type 'exceptions.ValueError'>", 
                "exc": "ValueError('rowlen 1132800 exceeds limit 600000',)"
            }
        }
    }, 
    "1668": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 3, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 9, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.06795833259820938, 
            "svm_time": 55.11047291755676, 
            "slm_time": 12.641391038894653, 
            "feat_shape": [
                800, 
                256, 
                8, 
                12
            ]
        }
    }, 
    "1669": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 16, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 4, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 64, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 3
        }, 
        "result": {
            "status": "ok", 
            "loss": 0.13579164445400238, 
            "svm_time": 54.56776213645935, 
            "slm_time": 8.858407974243164, 
            "feat_shape": [
                800, 
                16, 
                24, 
                32
            ]
        }
    }, 
    "1670": {
        "hps": {
            "_depth": 1, 
            "l2_0_filt@n_filters": 256, 
            "l2_1_pool@rf_size": 9, 
            "l1_1@pool_stride": 8, 
            "l2_0_filt@rf_size": 5, 
            "_max_axis": 320, 
            "l1_2_norm@rfn_size": 3, 
            "l1_0_filt@n_filters": 128, 
            "l1_0_filt@rf_size": 5, 
            "l2_1@pool_order": 1.0, 
            "l1_1@pool_order": 1.0, 
            "l2_2_norm@rfn_size": 0, 
            "l2_1@pool_stride": 2, 
            "l0_0_norm@rfn_size": 5, 
            "l1_1_pool@rf_size": 9
        }, 
        "result": {
            "status": "new"
        }
    }
}